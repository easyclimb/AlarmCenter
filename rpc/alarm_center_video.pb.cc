// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: alarm_center_video.proto
#include "stdafx.h"

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "alarm_center_video.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace alarm_center_video {

namespace {

const ::google::protobuf::Descriptor* request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  request_reflection_ = NULL;
const ::google::protobuf::Descriptor* reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* dev_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dev_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* alarm_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  alarm_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* hisroty_record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hisroty_record_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_alarm_5fcenter_5fvideo_2eproto() {
  protobuf_AddDesc_alarm_5fcenter_5fvideo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "alarm_center_video.proto");
  GOOGLE_CHECK(file != NULL);
  request_descriptor_ = file->message_type(0);
  static const int request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request, place_holder_),
  };
  request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      request_descriptor_,
      request::default_instance_,
      request_offsets_,
      -1,
      -1,
      -1,
      sizeof(request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request, _is_default_instance_));
  reply_descriptor_ = file->message_type(1);
  static const int reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reply, place_holder_),
  };
  reply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      reply_descriptor_,
      reply::default_instance_,
      reply_offsets_,
      -1,
      -1,
      -1,
      sizeof(reply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reply, _is_default_instance_));
  dev_info_descriptor_ = file->message_type(2);
  static const int dev_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dev_info, dev_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dev_info, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dev_info, note_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dev_info, productor_),
  };
  dev_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      dev_info_descriptor_,
      dev_info::default_instance_,
      dev_info_offsets_,
      -1,
      -1,
      -1,
      sizeof(dev_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dev_info, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dev_info, _is_default_instance_));
  alarm_info_descriptor_ = file->message_type(3);
  static const int alarm_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarm_info, devinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarm_info, alarm_msg_),
  };
  alarm_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      alarm_info_descriptor_,
      alarm_info::default_instance_,
      alarm_info_offsets_,
      -1,
      -1,
      -1,
      sizeof(alarm_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarm_info, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarm_info, _is_default_instance_));
  hisroty_record_descriptor_ = file->message_type(4);
  static const int hisroty_record_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hisroty_record, ademco_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hisroty_record, zone_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hisroty_record, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hisroty_record, timestamp_),
  };
  hisroty_record_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hisroty_record_descriptor_,
      hisroty_record::default_instance_,
      hisroty_record_offsets_,
      -1,
      -1,
      -1,
      sizeof(hisroty_record),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hisroty_record, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hisroty_record, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_alarm_5fcenter_5fvideo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      request_descriptor_, &request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      reply_descriptor_, &reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      dev_info_descriptor_, &dev_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      alarm_info_descriptor_, &alarm_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hisroty_record_descriptor_, &hisroty_record::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_alarm_5fcenter_5fvideo_2eproto() {
  delete request::default_instance_;
  delete request_reflection_;
  delete reply::default_instance_;
  delete reply_reflection_;
  delete dev_info::default_instance_;
  delete dev_info_reflection_;
  delete alarm_info::default_instance_;
  delete alarm_info_reflection_;
  delete hisroty_record::default_instance_;
  delete hisroty_record_reflection_;
}

void protobuf_AddDesc_alarm_5fcenter_5fvideo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030alarm_center_video.proto\022\022alarm_center"
    "_video\"\037\n\007request\022\024\n\014place_holder\030\001 \001(\t\""
    "\035\n\005reply\022\024\n\014place_holder\030\001 \001(\t\"I\n\010dev_in"
    "fo\022\016\n\006dev_id\030\001 \001(\005\022\014\n\004user\030\002 \001(\t\022\014\n\004note"
    "\030\003 \001(\t\022\021\n\tproductor\030\004 \001(\t\"N\n\nalarm_info\022"
    "-\n\007devinfo\030\001 \001(\0132\034.alarm_center_video.de"
    "v_info\022\021\n\talarm_msg\030\002 \003(\t\"Z\n\016hisroty_rec"
    "ord\022\021\n\tademco_id\030\001 \001(\005\022\022\n\nzone_value\030\002 \001"
    "(\005\022\016\n\006record\030\003 \001(\t\022\021\n\ttimestamp\030\004 \001(\t2\216\002"
    "\n\rvideo_service\022M\n\014get_all_devs\022\033.alarm_"
    "center_video.request\032\034.alarm_center_vide"
    "o.dev_info\"\0000\001\022T\n\021get_alarming_devs\022\033.al"
    "arm_center_video.request\032\036.alarm_center_"
    "video.alarm_info\"\0000\001\022X\n\025insert_history_r"
    "ecord\022\".alarm_center_video.hisroty_recor"
    "d\032\031.alarm_center_video.reply\"\000b\006proto3", 638);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "alarm_center_video.proto", &protobuf_RegisterTypes);
  request::default_instance_ = new request();
  reply::default_instance_ = new reply();
  dev_info::default_instance_ = new dev_info();
  alarm_info::default_instance_ = new alarm_info();
  hisroty_record::default_instance_ = new hisroty_record();
  request::default_instance_->InitAsDefaultInstance();
  reply::default_instance_->InitAsDefaultInstance();
  dev_info::default_instance_->InitAsDefaultInstance();
  alarm_info::default_instance_->InitAsDefaultInstance();
  hisroty_record::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_alarm_5fcenter_5fvideo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_alarm_5fcenter_5fvideo_2eproto {
  StaticDescriptorInitializer_alarm_5fcenter_5fvideo_2eproto() {
    protobuf_AddDesc_alarm_5fcenter_5fvideo_2eproto();
  }
} static_descriptor_initializer_alarm_5fcenter_5fvideo_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int request::kPlaceHolderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

request::request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarm_center_video.request)
}

void request::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

request::request(const request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:alarm_center_video.request)
}

void request::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  place_holder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

request::~request() {
  // @@protoc_insertion_point(destructor:alarm_center_video.request)
  SharedDtor();
}

void request::SharedDtor() {
  place_holder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return request_descriptor_;
}

const request& request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alarm_5fcenter_5fvideo_2eproto();
  return *default_instance_;
}

request* request::default_instance_ = NULL;

request* request::New(::google::protobuf::Arena* arena) const {
  request* n = new request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void request::Clear() {
// @@protoc_insertion_point(message_clear_start:alarm_center_video.request)
  place_holder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarm_center_video.request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string place_holder = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_place_holder()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->place_holder().data(), this->place_holder().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarm_center_video.request.place_holder"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarm_center_video.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarm_center_video.request)
  return false;
#undef DO_
}

void request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarm_center_video.request)
  // optional string place_holder = 1;
  if (this->place_holder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->place_holder().data(), this->place_holder().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.request.place_holder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->place_holder(), output);
  }

  // @@protoc_insertion_point(serialize_end:alarm_center_video.request)
}

::google::protobuf::uint8* request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:alarm_center_video.request)
  // optional string place_holder = 1;
  if (this->place_holder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->place_holder().data(), this->place_holder().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.request.place_holder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->place_holder(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:alarm_center_video.request)
  return target;
}

int request::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:alarm_center_video.request)
  int total_size = 0;

  // optional string place_holder = 1;
  if (this->place_holder().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->place_holder());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarm_center_video.request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarm_center_video.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarm_center_video.request)
    MergeFrom(*source);
  }
}

void request::MergeFrom(const request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarm_center_video.request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.place_holder().size() > 0) {

    place_holder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.place_holder_);
  }
}

void request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarm_center_video.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void request::CopyFrom(const request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarm_center_video.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool request::IsInitialized() const {

  return true;
}

void request::Swap(request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void request::InternalSwap(request* other) {
  place_holder_.Swap(&other->place_holder_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = request_descriptor_;
  metadata.reflection = request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// request

// optional string place_holder = 1;
void request::clear_place_holder() {
  place_holder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& request::place_holder() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.request.place_holder)
  return place_holder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void request::set_place_holder(const ::std::string& value) {
  
  place_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarm_center_video.request.place_holder)
}
 void request::set_place_holder(const char* value) {
  
  place_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarm_center_video.request.place_holder)
}
 void request::set_place_holder(const char* value, size_t size) {
  
  place_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarm_center_video.request.place_holder)
}
 ::std::string* request::mutable_place_holder() {
  
  // @@protoc_insertion_point(field_mutable:alarm_center_video.request.place_holder)
  return place_holder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* request::release_place_holder() {
  // @@protoc_insertion_point(field_release:alarm_center_video.request.place_holder)
  
  return place_holder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void request::set_allocated_place_holder(::std::string* place_holder) {
  if (place_holder != NULL) {
    
  } else {
    
  }
  place_holder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), place_holder);
  // @@protoc_insertion_point(field_set_allocated:alarm_center_video.request.place_holder)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int reply::kPlaceHolderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

reply::reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarm_center_video.reply)
}

void reply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

reply::reply(const reply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:alarm_center_video.reply)
}

void reply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  place_holder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

reply::~reply() {
  // @@protoc_insertion_point(destructor:alarm_center_video.reply)
  SharedDtor();
}

void reply::SharedDtor() {
  place_holder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reply_descriptor_;
}

const reply& reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alarm_5fcenter_5fvideo_2eproto();
  return *default_instance_;
}

reply* reply::default_instance_ = NULL;

reply* reply::New(::google::protobuf::Arena* arena) const {
  reply* n = new reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void reply::Clear() {
// @@protoc_insertion_point(message_clear_start:alarm_center_video.reply)
  place_holder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarm_center_video.reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string place_holder = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_place_holder()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->place_holder().data(), this->place_holder().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarm_center_video.reply.place_holder"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarm_center_video.reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarm_center_video.reply)
  return false;
#undef DO_
}

void reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarm_center_video.reply)
  // optional string place_holder = 1;
  if (this->place_holder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->place_holder().data(), this->place_holder().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.reply.place_holder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->place_holder(), output);
  }

  // @@protoc_insertion_point(serialize_end:alarm_center_video.reply)
}

::google::protobuf::uint8* reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:alarm_center_video.reply)
  // optional string place_holder = 1;
  if (this->place_holder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->place_holder().data(), this->place_holder().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.reply.place_holder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->place_holder(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:alarm_center_video.reply)
  return target;
}

int reply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:alarm_center_video.reply)
  int total_size = 0;

  // optional string place_holder = 1;
  if (this->place_holder().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->place_holder());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarm_center_video.reply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const reply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarm_center_video.reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarm_center_video.reply)
    MergeFrom(*source);
  }
}

void reply::MergeFrom(const reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarm_center_video.reply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.place_holder().size() > 0) {

    place_holder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.place_holder_);
  }
}

void reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarm_center_video.reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reply::CopyFrom(const reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarm_center_video.reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reply::IsInitialized() const {

  return true;
}

void reply::Swap(reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void reply::InternalSwap(reply* other) {
  place_holder_.Swap(&other->place_holder_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reply_descriptor_;
  metadata.reflection = reply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// reply

// optional string place_holder = 1;
void reply::clear_place_holder() {
  place_holder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& reply::place_holder() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.reply.place_holder)
  return place_holder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void reply::set_place_holder(const ::std::string& value) {
  
  place_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarm_center_video.reply.place_holder)
}
 void reply::set_place_holder(const char* value) {
  
  place_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarm_center_video.reply.place_holder)
}
 void reply::set_place_holder(const char* value, size_t size) {
  
  place_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarm_center_video.reply.place_holder)
}
 ::std::string* reply::mutable_place_holder() {
  
  // @@protoc_insertion_point(field_mutable:alarm_center_video.reply.place_holder)
  return place_holder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* reply::release_place_holder() {
  // @@protoc_insertion_point(field_release:alarm_center_video.reply.place_holder)
  
  return place_holder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void reply::set_allocated_place_holder(::std::string* place_holder) {
  if (place_holder != NULL) {
    
  } else {
    
  }
  place_holder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), place_holder);
  // @@protoc_insertion_point(field_set_allocated:alarm_center_video.reply.place_holder)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int dev_info::kDevIdFieldNumber;
const int dev_info::kUserFieldNumber;
const int dev_info::kNoteFieldNumber;
const int dev_info::kProductorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

dev_info::dev_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarm_center_video.dev_info)
}

void dev_info::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

dev_info::dev_info(const dev_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:alarm_center_video.dev_info)
}

void dev_info::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dev_id_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  note_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

dev_info::~dev_info() {
  // @@protoc_insertion_point(destructor:alarm_center_video.dev_info)
  SharedDtor();
}

void dev_info::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  note_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void dev_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dev_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dev_info_descriptor_;
}

const dev_info& dev_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alarm_5fcenter_5fvideo_2eproto();
  return *default_instance_;
}

dev_info* dev_info::default_instance_ = NULL;

dev_info* dev_info::New(::google::protobuf::Arena* arena) const {
  dev_info* n = new dev_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void dev_info::Clear() {
// @@protoc_insertion_point(message_clear_start:alarm_center_video.dev_info)
  dev_id_ = 0;
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  note_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool dev_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarm_center_video.dev_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dev_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dev_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // optional string user = 2;
      case 2: {
        if (tag == 18) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarm_center_video.dev_info.user"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_note;
        break;
      }

      // optional string note = 3;
      case 3: {
        if (tag == 26) {
         parse_note:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_note()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->note().data(), this->note().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarm_center_video.dev_info.note"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_productor;
        break;
      }

      // optional string productor = 4;
      case 4: {
        if (tag == 34) {
         parse_productor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->productor().data(), this->productor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarm_center_video.dev_info.productor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarm_center_video.dev_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarm_center_video.dev_info)
  return false;
#undef DO_
}

void dev_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarm_center_video.dev_info)
  // optional int32 dev_id = 1;
  if (this->dev_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dev_id(), output);
  }

  // optional string user = 2;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.dev_info.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user(), output);
  }

  // optional string note = 3;
  if (this->note().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.dev_info.note");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->note(), output);
  }

  // optional string productor = 4;
  if (this->productor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productor().data(), this->productor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.dev_info.productor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->productor(), output);
  }

  // @@protoc_insertion_point(serialize_end:alarm_center_video.dev_info)
}

::google::protobuf::uint8* dev_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:alarm_center_video.dev_info)
  // optional int32 dev_id = 1;
  if (this->dev_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dev_id(), target);
  }

  // optional string user = 2;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.dev_info.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user(), target);
  }

  // optional string note = 3;
  if (this->note().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.dev_info.note");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->note(), target);
  }

  // optional string productor = 4;
  if (this->productor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productor().data(), this->productor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.dev_info.productor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->productor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:alarm_center_video.dev_info)
  return target;
}

int dev_info::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:alarm_center_video.dev_info)
  int total_size = 0;

  // optional int32 dev_id = 1;
  if (this->dev_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dev_id());
  }

  // optional string user = 2;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  // optional string note = 3;
  if (this->note().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->note());
  }

  // optional string productor = 4;
  if (this->productor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productor());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dev_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarm_center_video.dev_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const dev_info* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const dev_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarm_center_video.dev_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarm_center_video.dev_info)
    MergeFrom(*source);
  }
}

void dev_info::MergeFrom(const dev_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarm_center_video.dev_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.dev_id() != 0) {
    set_dev_id(from.dev_id());
  }
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.note().size() > 0) {

    note_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.note_);
  }
  if (from.productor().size() > 0) {

    productor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productor_);
  }
}

void dev_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarm_center_video.dev_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dev_info::CopyFrom(const dev_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarm_center_video.dev_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dev_info::IsInitialized() const {

  return true;
}

void dev_info::Swap(dev_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void dev_info::InternalSwap(dev_info* other) {
  std::swap(dev_id_, other->dev_id_);
  user_.Swap(&other->user_);
  note_.Swap(&other->note_);
  productor_.Swap(&other->productor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata dev_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dev_info_descriptor_;
  metadata.reflection = dev_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// dev_info

// optional int32 dev_id = 1;
void dev_info::clear_dev_id() {
  dev_id_ = 0;
}
 ::google::protobuf::int32 dev_info::dev_id() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.dev_info.dev_id)
  return dev_id_;
}
 void dev_info::set_dev_id(::google::protobuf::int32 value) {
  
  dev_id_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_video.dev_info.dev_id)
}

// optional string user = 2;
void dev_info::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& dev_info::user() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.dev_info.user)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void dev_info::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarm_center_video.dev_info.user)
}
 void dev_info::set_user(const char* value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarm_center_video.dev_info.user)
}
 void dev_info::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarm_center_video.dev_info.user)
}
 ::std::string* dev_info::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:alarm_center_video.dev_info.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* dev_info::release_user() {
  // @@protoc_insertion_point(field_release:alarm_center_video.dev_info.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void dev_info::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:alarm_center_video.dev_info.user)
}

// optional string note = 3;
void dev_info::clear_note() {
  note_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& dev_info::note() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.dev_info.note)
  return note_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void dev_info::set_note(const ::std::string& value) {
  
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarm_center_video.dev_info.note)
}
 void dev_info::set_note(const char* value) {
  
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarm_center_video.dev_info.note)
}
 void dev_info::set_note(const char* value, size_t size) {
  
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarm_center_video.dev_info.note)
}
 ::std::string* dev_info::mutable_note() {
  
  // @@protoc_insertion_point(field_mutable:alarm_center_video.dev_info.note)
  return note_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* dev_info::release_note() {
  // @@protoc_insertion_point(field_release:alarm_center_video.dev_info.note)
  
  return note_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void dev_info::set_allocated_note(::std::string* note) {
  if (note != NULL) {
    
  } else {
    
  }
  note_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), note);
  // @@protoc_insertion_point(field_set_allocated:alarm_center_video.dev_info.note)
}

// optional string productor = 4;
void dev_info::clear_productor() {
  productor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& dev_info::productor() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.dev_info.productor)
  return productor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void dev_info::set_productor(const ::std::string& value) {
  
  productor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarm_center_video.dev_info.productor)
}
 void dev_info::set_productor(const char* value) {
  
  productor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarm_center_video.dev_info.productor)
}
 void dev_info::set_productor(const char* value, size_t size) {
  
  productor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarm_center_video.dev_info.productor)
}
 ::std::string* dev_info::mutable_productor() {
  
  // @@protoc_insertion_point(field_mutable:alarm_center_video.dev_info.productor)
  return productor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* dev_info::release_productor() {
  // @@protoc_insertion_point(field_release:alarm_center_video.dev_info.productor)
  
  return productor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void dev_info::set_allocated_productor(::std::string* productor) {
  if (productor != NULL) {
    
  } else {
    
  }
  productor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productor);
  // @@protoc_insertion_point(field_set_allocated:alarm_center_video.dev_info.productor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int alarm_info::kDevinfoFieldNumber;
const int alarm_info::kAlarmMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

alarm_info::alarm_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarm_center_video.alarm_info)
}

void alarm_info::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  devinfo_ = const_cast< ::alarm_center_video::dev_info*>(&::alarm_center_video::dev_info::default_instance());
}

alarm_info::alarm_info(const alarm_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:alarm_center_video.alarm_info)
}

void alarm_info::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devinfo_ = NULL;
}

alarm_info::~alarm_info() {
  // @@protoc_insertion_point(destructor:alarm_center_video.alarm_info)
  SharedDtor();
}

void alarm_info::SharedDtor() {
  if (this != default_instance_) {
    delete devinfo_;
  }
}

void alarm_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* alarm_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return alarm_info_descriptor_;
}

const alarm_info& alarm_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alarm_5fcenter_5fvideo_2eproto();
  return *default_instance_;
}

alarm_info* alarm_info::default_instance_ = NULL;

alarm_info* alarm_info::New(::google::protobuf::Arena* arena) const {
  alarm_info* n = new alarm_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void alarm_info::Clear() {
// @@protoc_insertion_point(message_clear_start:alarm_center_video.alarm_info)
  if (GetArenaNoVirtual() == NULL && devinfo_ != NULL) delete devinfo_;
  devinfo_ = NULL;
  alarm_msg_.Clear();
}

bool alarm_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarm_center_video.alarm_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .alarm_center_video.dev_info devinfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_devinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_alarm_msg;
        break;
      }

      // repeated string alarm_msg = 2;
      case 2: {
        if (tag == 18) {
         parse_alarm_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_alarm_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alarm_msg(this->alarm_msg_size() - 1).data(),
            this->alarm_msg(this->alarm_msg_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarm_center_video.alarm_info.alarm_msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_alarm_msg;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarm_center_video.alarm_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarm_center_video.alarm_info)
  return false;
#undef DO_
}

void alarm_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarm_center_video.alarm_info)
  // optional .alarm_center_video.dev_info devinfo = 1;
  if (this->has_devinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->devinfo_, output);
  }

  // repeated string alarm_msg = 2;
  for (int i = 0; i < this->alarm_msg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alarm_msg(i).data(), this->alarm_msg(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.alarm_info.alarm_msg");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->alarm_msg(i), output);
  }

  // @@protoc_insertion_point(serialize_end:alarm_center_video.alarm_info)
}

::google::protobuf::uint8* alarm_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:alarm_center_video.alarm_info)
  // optional .alarm_center_video.dev_info devinfo = 1;
  if (this->has_devinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->devinfo_, target);
  }

  // repeated string alarm_msg = 2;
  for (int i = 0; i < this->alarm_msg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alarm_msg(i).data(), this->alarm_msg(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.alarm_info.alarm_msg");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->alarm_msg(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:alarm_center_video.alarm_info)
  return target;
}

int alarm_info::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:alarm_center_video.alarm_info)
  int total_size = 0;

  // optional .alarm_center_video.dev_info devinfo = 1;
  if (this->has_devinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->devinfo_);
  }

  // repeated string alarm_msg = 2;
  total_size += 1 * this->alarm_msg_size();
  for (int i = 0; i < this->alarm_msg_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->alarm_msg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void alarm_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarm_center_video.alarm_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const alarm_info* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const alarm_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarm_center_video.alarm_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarm_center_video.alarm_info)
    MergeFrom(*source);
  }
}

void alarm_info::MergeFrom(const alarm_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarm_center_video.alarm_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  alarm_msg_.MergeFrom(from.alarm_msg_);
  if (from.has_devinfo()) {
    mutable_devinfo()->::alarm_center_video::dev_info::MergeFrom(from.devinfo());
  }
}

void alarm_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarm_center_video.alarm_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void alarm_info::CopyFrom(const alarm_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarm_center_video.alarm_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool alarm_info::IsInitialized() const {

  return true;
}

void alarm_info::Swap(alarm_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void alarm_info::InternalSwap(alarm_info* other) {
  std::swap(devinfo_, other->devinfo_);
  alarm_msg_.UnsafeArenaSwap(&other->alarm_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata alarm_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = alarm_info_descriptor_;
  metadata.reflection = alarm_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// alarm_info

// optional .alarm_center_video.dev_info devinfo = 1;
bool alarm_info::has_devinfo() const {
  return !_is_default_instance_ && devinfo_ != NULL;
}
void alarm_info::clear_devinfo() {
  if (GetArenaNoVirtual() == NULL && devinfo_ != NULL) delete devinfo_;
  devinfo_ = NULL;
}
const ::alarm_center_video::dev_info& alarm_info::devinfo() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.alarm_info.devinfo)
  return devinfo_ != NULL ? *devinfo_ : *default_instance_->devinfo_;
}
::alarm_center_video::dev_info* alarm_info::mutable_devinfo() {
  
  if (devinfo_ == NULL) {
    devinfo_ = new ::alarm_center_video::dev_info;
  }
  // @@protoc_insertion_point(field_mutable:alarm_center_video.alarm_info.devinfo)
  return devinfo_;
}
::alarm_center_video::dev_info* alarm_info::release_devinfo() {
  // @@protoc_insertion_point(field_release:alarm_center_video.alarm_info.devinfo)
  
  ::alarm_center_video::dev_info* temp = devinfo_;
  devinfo_ = NULL;
  return temp;
}
void alarm_info::set_allocated_devinfo(::alarm_center_video::dev_info* devinfo) {
  delete devinfo_;
  devinfo_ = devinfo;
  if (devinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarm_center_video.alarm_info.devinfo)
}

// repeated string alarm_msg = 2;
int alarm_info::alarm_msg_size() const {
  return alarm_msg_.size();
}
void alarm_info::clear_alarm_msg() {
  alarm_msg_.Clear();
}
 const ::std::string& alarm_info::alarm_msg(int index) const {
  // @@protoc_insertion_point(field_get:alarm_center_video.alarm_info.alarm_msg)
  return alarm_msg_.Get(index);
}
 ::std::string* alarm_info::mutable_alarm_msg(int index) {
  // @@protoc_insertion_point(field_mutable:alarm_center_video.alarm_info.alarm_msg)
  return alarm_msg_.Mutable(index);
}
 void alarm_info::set_alarm_msg(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:alarm_center_video.alarm_info.alarm_msg)
  alarm_msg_.Mutable(index)->assign(value);
}
 void alarm_info::set_alarm_msg(int index, const char* value) {
  alarm_msg_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:alarm_center_video.alarm_info.alarm_msg)
}
 void alarm_info::set_alarm_msg(int index, const char* value, size_t size) {
  alarm_msg_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:alarm_center_video.alarm_info.alarm_msg)
}
 ::std::string* alarm_info::add_alarm_msg() {
  // @@protoc_insertion_point(field_add_mutable:alarm_center_video.alarm_info.alarm_msg)
  return alarm_msg_.Add();
}
 void alarm_info::add_alarm_msg(const ::std::string& value) {
  alarm_msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:alarm_center_video.alarm_info.alarm_msg)
}
 void alarm_info::add_alarm_msg(const char* value) {
  alarm_msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:alarm_center_video.alarm_info.alarm_msg)
}
 void alarm_info::add_alarm_msg(const char* value, size_t size) {
  alarm_msg_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:alarm_center_video.alarm_info.alarm_msg)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
alarm_info::alarm_msg() const {
  // @@protoc_insertion_point(field_list:alarm_center_video.alarm_info.alarm_msg)
  return alarm_msg_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
alarm_info::mutable_alarm_msg() {
  // @@protoc_insertion_point(field_mutable_list:alarm_center_video.alarm_info.alarm_msg)
  return &alarm_msg_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hisroty_record::kAdemcoIdFieldNumber;
const int hisroty_record::kZoneValueFieldNumber;
const int hisroty_record::kRecordFieldNumber;
const int hisroty_record::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hisroty_record::hisroty_record()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarm_center_video.hisroty_record)
}

void hisroty_record::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

hisroty_record::hisroty_record(const hisroty_record& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:alarm_center_video.hisroty_record)
}

void hisroty_record::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ademco_id_ = 0;
  zone_value_ = 0;
  record_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

hisroty_record::~hisroty_record() {
  // @@protoc_insertion_point(destructor:alarm_center_video.hisroty_record)
  SharedDtor();
}

void hisroty_record::SharedDtor() {
  record_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void hisroty_record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hisroty_record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hisroty_record_descriptor_;
}

const hisroty_record& hisroty_record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alarm_5fcenter_5fvideo_2eproto();
  return *default_instance_;
}

hisroty_record* hisroty_record::default_instance_ = NULL;

hisroty_record* hisroty_record::New(::google::protobuf::Arena* arena) const {
  hisroty_record* n = new hisroty_record;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hisroty_record::Clear() {
// @@protoc_insertion_point(message_clear_start:alarm_center_video.hisroty_record)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(hisroty_record, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<hisroty_record*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ademco_id_, zone_value_);
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool hisroty_record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarm_center_video.hisroty_record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ademco_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ademco_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zone_value;
        break;
      }

      // optional int32 zone_value = 2;
      case 2: {
        if (tag == 16) {
         parse_zone_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zone_value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_record;
        break;
      }

      // optional string record = 3;
      case 3: {
        if (tag == 26) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->record().data(), this->record().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarm_center_video.hisroty_record.record"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 4;
      case 4: {
        if (tag == 34) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarm_center_video.hisroty_record.timestamp"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarm_center_video.hisroty_record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarm_center_video.hisroty_record)
  return false;
#undef DO_
}

void hisroty_record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarm_center_video.hisroty_record)
  // optional int32 ademco_id = 1;
  if (this->ademco_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ademco_id(), output);
  }

  // optional int32 zone_value = 2;
  if (this->zone_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->zone_value(), output);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.hisroty_record.record");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->record(), output);
  }

  // optional string timestamp = 4;
  if (this->timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.hisroty_record.timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:alarm_center_video.hisroty_record)
}

::google::protobuf::uint8* hisroty_record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:alarm_center_video.hisroty_record)
  // optional int32 ademco_id = 1;
  if (this->ademco_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ademco_id(), target);
  }

  // optional int32 zone_value = 2;
  if (this->zone_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->zone_value(), target);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.hisroty_record.record");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->record(), target);
  }

  // optional string timestamp = 4;
  if (this->timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.hisroty_record.timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:alarm_center_video.hisroty_record)
  return target;
}

int hisroty_record::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:alarm_center_video.hisroty_record)
  int total_size = 0;

  // optional int32 ademco_id = 1;
  if (this->ademco_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ademco_id());
  }

  // optional int32 zone_value = 2;
  if (this->zone_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zone_value());
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->record());
  }

  // optional string timestamp = 4;
  if (this->timestamp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hisroty_record::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarm_center_video.hisroty_record)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hisroty_record* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const hisroty_record>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarm_center_video.hisroty_record)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarm_center_video.hisroty_record)
    MergeFrom(*source);
  }
}

void hisroty_record::MergeFrom(const hisroty_record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarm_center_video.hisroty_record)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.ademco_id() != 0) {
    set_ademco_id(from.ademco_id());
  }
  if (from.zone_value() != 0) {
    set_zone_value(from.zone_value());
  }
  if (from.record().size() > 0) {

    record_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_);
  }
  if (from.timestamp().size() > 0) {

    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
}

void hisroty_record::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarm_center_video.hisroty_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hisroty_record::CopyFrom(const hisroty_record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarm_center_video.hisroty_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hisroty_record::IsInitialized() const {

  return true;
}

void hisroty_record::Swap(hisroty_record* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hisroty_record::InternalSwap(hisroty_record* other) {
  std::swap(ademco_id_, other->ademco_id_);
  std::swap(zone_value_, other->zone_value_);
  record_.Swap(&other->record_);
  timestamp_.Swap(&other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hisroty_record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hisroty_record_descriptor_;
  metadata.reflection = hisroty_record_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hisroty_record

// optional int32 ademco_id = 1;
void hisroty_record::clear_ademco_id() {
  ademco_id_ = 0;
}
 ::google::protobuf::int32 hisroty_record::ademco_id() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.hisroty_record.ademco_id)
  return ademco_id_;
}
 void hisroty_record::set_ademco_id(::google::protobuf::int32 value) {
  
  ademco_id_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_video.hisroty_record.ademco_id)
}

// optional int32 zone_value = 2;
void hisroty_record::clear_zone_value() {
  zone_value_ = 0;
}
 ::google::protobuf::int32 hisroty_record::zone_value() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.hisroty_record.zone_value)
  return zone_value_;
}
 void hisroty_record::set_zone_value(::google::protobuf::int32 value) {
  
  zone_value_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_video.hisroty_record.zone_value)
}

// optional string record = 3;
void hisroty_record::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& hisroty_record::record() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.hisroty_record.record)
  return record_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void hisroty_record::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarm_center_video.hisroty_record.record)
}
 void hisroty_record::set_record(const char* value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarm_center_video.hisroty_record.record)
}
 void hisroty_record::set_record(const char* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarm_center_video.hisroty_record.record)
}
 ::std::string* hisroty_record::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:alarm_center_video.hisroty_record.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* hisroty_record::release_record() {
  // @@protoc_insertion_point(field_release:alarm_center_video.hisroty_record.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void hisroty_record::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:alarm_center_video.hisroty_record.record)
}

// optional string timestamp = 4;
void hisroty_record::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& hisroty_record::timestamp() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.hisroty_record.timestamp)
  return timestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void hisroty_record::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarm_center_video.hisroty_record.timestamp)
}
 void hisroty_record::set_timestamp(const char* value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarm_center_video.hisroty_record.timestamp)
}
 void hisroty_record::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarm_center_video.hisroty_record.timestamp)
}
 ::std::string* hisroty_record::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:alarm_center_video.hisroty_record.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* hisroty_record::release_timestamp() {
  // @@protoc_insertion_point(field_release:alarm_center_video.hisroty_record.timestamp)
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void hisroty_record::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:alarm_center_video.hisroty_record.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace alarm_center_video

// @@protoc_insertion_point(global_scope)
