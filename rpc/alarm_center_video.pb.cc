// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: alarm_center_video.proto
#include "stdafx.h"

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "alarm_center_video.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace alarm_center_video {

namespace {

const ::google::protobuf::Descriptor* request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  request_reflection_ = NULL;
const ::google::protobuf::Descriptor* reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* is_show_mgr_dlg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  is_show_mgr_dlg_reflection_ = NULL;
const ::google::protobuf::Descriptor* zone_uuid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  zone_uuid_reflection_ = NULL;
const ::google::protobuf::Descriptor* camera_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  camera_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* dev_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dev_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* alarm_text_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  alarm_text_reflection_ = NULL;
const ::google::protobuf::Descriptor* alarm_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  alarm_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* bind_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bind_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* hisroty_record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hisroty_record_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_alarm_5fcenter_5fvideo_2eproto() {
  protobuf_AddDesc_alarm_5fcenter_5fvideo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "alarm_center_video.proto");
  GOOGLE_CHECK(file != NULL);
  request_descriptor_ = file->message_type(0);
  static const int request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request, place_holder_),
  };
  request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      request_descriptor_,
      request::default_instance_,
      request_offsets_,
      -1,
      -1,
      -1,
      sizeof(request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request, _is_default_instance_));
  reply_descriptor_ = file->message_type(1);
  static const int reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reply, place_holder_),
  };
  reply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      reply_descriptor_,
      reply::default_instance_,
      reply_offsets_,
      -1,
      -1,
      -1,
      sizeof(reply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reply, _is_default_instance_));
  is_show_mgr_dlg_descriptor_ = file->message_type(2);
  static const int is_show_mgr_dlg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(is_show_mgr_dlg, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(is_show_mgr_dlg, user_level_),
  };
  is_show_mgr_dlg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      is_show_mgr_dlg_descriptor_,
      is_show_mgr_dlg::default_instance_,
      is_show_mgr_dlg_offsets_,
      -1,
      -1,
      -1,
      sizeof(is_show_mgr_dlg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(is_show_mgr_dlg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(is_show_mgr_dlg, _is_default_instance_));
  zone_uuid_descriptor_ = file->message_type(3);
  static const int zone_uuid_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zone_uuid, ademco_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zone_uuid, zone_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zone_uuid, gg_),
  };
  zone_uuid_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      zone_uuid_descriptor_,
      zone_uuid::default_instance_,
      zone_uuid_offsets_,
      -1,
      -1,
      -1,
      sizeof(zone_uuid),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zone_uuid, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zone_uuid, _is_default_instance_));
  camera_info_descriptor_ = file->message_type(4);
  static const int camera_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(camera_info, dev_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(camera_info, productor_type_),
  };
  camera_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      camera_info_descriptor_,
      camera_info::default_instance_,
      camera_info_offsets_,
      -1,
      -1,
      -1,
      sizeof(camera_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(camera_info, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(camera_info, _is_default_instance_));
  dev_info_descriptor_ = file->message_type(5);
  static const int dev_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dev_info, dev_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dev_info, productor_type_),
  };
  dev_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      dev_info_descriptor_,
      dev_info::default_instance_,
      dev_info_offsets_,
      -1,
      -1,
      -1,
      sizeof(dev_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dev_info, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dev_info, _is_default_instance_));
  alarm_text_descriptor_ = file->message_type(6);
  static const int alarm_text_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarm_text, zone_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarm_text, sub_zone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarm_text, event_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarm_text, alarm_txt_),
  };
  alarm_text_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      alarm_text_descriptor_,
      alarm_text::default_instance_,
      alarm_text_offsets_,
      -1,
      -1,
      -1,
      sizeof(alarm_text),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarm_text, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarm_text, _is_default_instance_));
  alarm_info_descriptor_ = file->message_type(7);
  static const int alarm_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarm_info, devinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarm_info, zone_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarm_info, alarm_txt_),
  };
  alarm_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      alarm_info_descriptor_,
      alarm_info::default_instance_,
      alarm_info_offsets_,
      -1,
      -1,
      -1,
      sizeof(alarm_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarm_info, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alarm_info, _is_default_instance_));
  bind_info_descriptor_ = file->message_type(8);
  static const int bind_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bind_info, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bind_info, dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bind_info, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bind_info, auto_popup_),
  };
  bind_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      bind_info_descriptor_,
      bind_info::default_instance_,
      bind_info_offsets_,
      -1,
      -1,
      -1,
      sizeof(bind_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bind_info, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bind_info, _is_default_instance_));
  hisroty_record_descriptor_ = file->message_type(9);
  static const int hisroty_record_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hisroty_record, ademco_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hisroty_record, zone_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hisroty_record, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hisroty_record, timestamp_),
  };
  hisroty_record_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hisroty_record_descriptor_,
      hisroty_record::default_instance_,
      hisroty_record_offsets_,
      -1,
      -1,
      -1,
      sizeof(hisroty_record),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hisroty_record, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hisroty_record, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_alarm_5fcenter_5fvideo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      request_descriptor_, &request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      reply_descriptor_, &reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      is_show_mgr_dlg_descriptor_, &is_show_mgr_dlg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      zone_uuid_descriptor_, &zone_uuid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      camera_info_descriptor_, &camera_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      dev_info_descriptor_, &dev_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      alarm_text_descriptor_, &alarm_text::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      alarm_info_descriptor_, &alarm_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      bind_info_descriptor_, &bind_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hisroty_record_descriptor_, &hisroty_record::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_alarm_5fcenter_5fvideo_2eproto() {
  delete request::default_instance_;
  delete request_reflection_;
  delete reply::default_instance_;
  delete reply_reflection_;
  delete is_show_mgr_dlg::default_instance_;
  delete is_show_mgr_dlg_reflection_;
  delete zone_uuid::default_instance_;
  delete zone_uuid_reflection_;
  delete camera_info::default_instance_;
  delete camera_info_reflection_;
  delete dev_info::default_instance_;
  delete dev_info_reflection_;
  delete alarm_text::default_instance_;
  delete alarm_text_reflection_;
  delete alarm_info::default_instance_;
  delete alarm_info_reflection_;
  delete bind_info::default_instance_;
  delete bind_info_reflection_;
  delete hisroty_record::default_instance_;
  delete hisroty_record_reflection_;
}

void protobuf_AddDesc_alarm_5fcenter_5fvideo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030alarm_center_video.proto\022\022alarm_center"
    "_video\"\037\n\007request\022\024\n\014place_holder\030\001 \001(\t\""
    "\035\n\005reply\022\024\n\014place_holder\030\001 \001(\t\"3\n\017is_sho"
    "w_mgr_dlg\022\014\n\004show\030\001 \001(\t\022\022\n\nuser_level\030\002 "
    "\001(\005\">\n\tzone_uuid\022\021\n\tademco_id\030\001 \001(\005\022\022\n\nz"
    "one_value\030\002 \001(\005\022\n\n\002gg\030\003 \001(\005\"5\n\013camera_in"
    "fo\022\016\n\006dev_id\030\001 \001(\005\022\026\n\016productor_type\030\002 \001"
    "(\005\"2\n\010dev_info\022\016\n\006dev_id\030\001 \001(\005\022\026\n\016produc"
    "tor_type\030\002 \001(\005\"Y\n\nalarm_text\022\022\n\nzone_val"
    "ue\030\001 \001(\005\022\020\n\010sub_zone\030\002 \001(\005\022\022\n\nevent_code"
    "\030\003 \001(\005\022\021\n\talarm_txt\030\004 \001(\t\"\240\001\n\nalarm_info"
    "\022-\n\007devinfo\030\001 \001(\0132\034.alarm_center_video.d"
    "ev_info\0220\n\tzone_uuid\030\002 \001(\0132\035.alarm_cente"
    "r_video.zone_uuid\0221\n\talarm_txt\030\003 \001(\0132\036.a"
    "larm_center_video.alarm_text\"\205\001\n\tbind_in"
    "fo\022+\n\004uuid\030\001 \001(\0132\035.alarm_center_video.zo"
    "ne_uuid\022)\n\003dev\030\002 \001(\0132\034.alarm_center_vide"
    "o.dev_info\022\014\n\004bind\030\003 \001(\010\022\022\n\nauto_popup\030\004"
    " \001(\010\"Z\n\016hisroty_record\022\021\n\tademco_id\030\001 \001("
    "\005\022\022\n\nzone_value\030\002 \001(\005\022\016\n\006record\030\003 \001(\t\022\021\n"
    "\ttimestamp\030\004 \001(\t2\351\004\n\rvideo_service\022E\n\tup"
    "date_db\022\033.alarm_center_video.request\032\031.a"
    "larm_center_video.reply\"\000\022I\n\ris_db_updat"
    "ed\022\033.alarm_center_video.request\032\031.alarm_"
    "center_video.reply\"\000\022d\n\036get_is_show_vide"
    "o_user_mgr_dlg\022\033.alarm_center_video.requ"
    "est\032#.alarm_center_video.is_show_mgr_dlg"
    "\"\000\022T\n\021get_alarming_devs\022\033.alarm_center_v"
    "ideo.request\032\036.alarm_center_video.alarm_"
    "info\"\0000\001\022X\n\026get_updated_bind_infos\022\033.ala"
    "rm_center_video.request\032\035.alarm_center_v"
    "ideo.bind_info\"\0000\001\022Z\n\025insert_history_rec"
    "ord\022\".alarm_center_video.hisroty_record\032"
    "\031.alarm_center_video.reply\"\000(\001\022T\n\022delete"
    "_camera_info\022\037.alarm_center_video.camera"
    "_info\032\031.alarm_center_video.reply\"\000(\001b\006pr"
    "oto3", 1444);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "alarm_center_video.proto", &protobuf_RegisterTypes);
  request::default_instance_ = new request();
  reply::default_instance_ = new reply();
  is_show_mgr_dlg::default_instance_ = new is_show_mgr_dlg();
  zone_uuid::default_instance_ = new zone_uuid();
  camera_info::default_instance_ = new camera_info();
  dev_info::default_instance_ = new dev_info();
  alarm_text::default_instance_ = new alarm_text();
  alarm_info::default_instance_ = new alarm_info();
  bind_info::default_instance_ = new bind_info();
  hisroty_record::default_instance_ = new hisroty_record();
  request::default_instance_->InitAsDefaultInstance();
  reply::default_instance_->InitAsDefaultInstance();
  is_show_mgr_dlg::default_instance_->InitAsDefaultInstance();
  zone_uuid::default_instance_->InitAsDefaultInstance();
  camera_info::default_instance_->InitAsDefaultInstance();
  dev_info::default_instance_->InitAsDefaultInstance();
  alarm_text::default_instance_->InitAsDefaultInstance();
  alarm_info::default_instance_->InitAsDefaultInstance();
  bind_info::default_instance_->InitAsDefaultInstance();
  hisroty_record::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_alarm_5fcenter_5fvideo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_alarm_5fcenter_5fvideo_2eproto {
  StaticDescriptorInitializer_alarm_5fcenter_5fvideo_2eproto() {
    protobuf_AddDesc_alarm_5fcenter_5fvideo_2eproto();
  }
} static_descriptor_initializer_alarm_5fcenter_5fvideo_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int request::kPlaceHolderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

request::request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarm_center_video.request)
}

void request::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

request::request(const request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:alarm_center_video.request)
}

void request::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  place_holder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

request::~request() {
  // @@protoc_insertion_point(destructor:alarm_center_video.request)
  SharedDtor();
}

void request::SharedDtor() {
  place_holder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return request_descriptor_;
}

const request& request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alarm_5fcenter_5fvideo_2eproto();
  return *default_instance_;
}

request* request::default_instance_ = NULL;

request* request::New(::google::protobuf::Arena* arena) const {
  request* n = new request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void request::Clear() {
// @@protoc_insertion_point(message_clear_start:alarm_center_video.request)
  place_holder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarm_center_video.request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string place_holder = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_place_holder()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->place_holder().data(), this->place_holder().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarm_center_video.request.place_holder"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarm_center_video.request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarm_center_video.request)
  return false;
#undef DO_
}

void request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarm_center_video.request)
  // optional string place_holder = 1;
  if (this->place_holder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->place_holder().data(), this->place_holder().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.request.place_holder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->place_holder(), output);
  }

  // @@protoc_insertion_point(serialize_end:alarm_center_video.request)
}

::google::protobuf::uint8* request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:alarm_center_video.request)
  // optional string place_holder = 1;
  if (this->place_holder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->place_holder().data(), this->place_holder().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.request.place_holder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->place_holder(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:alarm_center_video.request)
  return target;
}

int request::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:alarm_center_video.request)
  int total_size = 0;

  // optional string place_holder = 1;
  if (this->place_holder().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->place_holder());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarm_center_video.request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarm_center_video.request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarm_center_video.request)
    MergeFrom(*source);
  }
}

void request::MergeFrom(const request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarm_center_video.request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.place_holder().size() > 0) {

    place_holder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.place_holder_);
  }
}

void request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarm_center_video.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void request::CopyFrom(const request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarm_center_video.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool request::IsInitialized() const {

  return true;
}

void request::Swap(request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void request::InternalSwap(request* other) {
  place_holder_.Swap(&other->place_holder_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = request_descriptor_;
  metadata.reflection = request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// request

// optional string place_holder = 1;
void request::clear_place_holder() {
  place_holder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& request::place_holder() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.request.place_holder)
  return place_holder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void request::set_place_holder(const ::std::string& value) {
  
  place_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarm_center_video.request.place_holder)
}
 void request::set_place_holder(const char* value) {
  
  place_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarm_center_video.request.place_holder)
}
 void request::set_place_holder(const char* value, size_t size) {
  
  place_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarm_center_video.request.place_holder)
}
 ::std::string* request::mutable_place_holder() {
  
  // @@protoc_insertion_point(field_mutable:alarm_center_video.request.place_holder)
  return place_holder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* request::release_place_holder() {
  // @@protoc_insertion_point(field_release:alarm_center_video.request.place_holder)
  
  return place_holder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void request::set_allocated_place_holder(::std::string* place_holder) {
  if (place_holder != NULL) {
    
  } else {
    
  }
  place_holder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), place_holder);
  // @@protoc_insertion_point(field_set_allocated:alarm_center_video.request.place_holder)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int reply::kPlaceHolderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

reply::reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarm_center_video.reply)
}

void reply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

reply::reply(const reply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:alarm_center_video.reply)
}

void reply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  place_holder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

reply::~reply() {
  // @@protoc_insertion_point(destructor:alarm_center_video.reply)
  SharedDtor();
}

void reply::SharedDtor() {
  place_holder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reply_descriptor_;
}

const reply& reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alarm_5fcenter_5fvideo_2eproto();
  return *default_instance_;
}

reply* reply::default_instance_ = NULL;

reply* reply::New(::google::protobuf::Arena* arena) const {
  reply* n = new reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void reply::Clear() {
// @@protoc_insertion_point(message_clear_start:alarm_center_video.reply)
  place_holder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarm_center_video.reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string place_holder = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_place_holder()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->place_holder().data(), this->place_holder().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarm_center_video.reply.place_holder"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarm_center_video.reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarm_center_video.reply)
  return false;
#undef DO_
}

void reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarm_center_video.reply)
  // optional string place_holder = 1;
  if (this->place_holder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->place_holder().data(), this->place_holder().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.reply.place_holder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->place_holder(), output);
  }

  // @@protoc_insertion_point(serialize_end:alarm_center_video.reply)
}

::google::protobuf::uint8* reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:alarm_center_video.reply)
  // optional string place_holder = 1;
  if (this->place_holder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->place_holder().data(), this->place_holder().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.reply.place_holder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->place_holder(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:alarm_center_video.reply)
  return target;
}

int reply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:alarm_center_video.reply)
  int total_size = 0;

  // optional string place_holder = 1;
  if (this->place_holder().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->place_holder());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarm_center_video.reply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const reply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarm_center_video.reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarm_center_video.reply)
    MergeFrom(*source);
  }
}

void reply::MergeFrom(const reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarm_center_video.reply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.place_holder().size() > 0) {

    place_holder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.place_holder_);
  }
}

void reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarm_center_video.reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reply::CopyFrom(const reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarm_center_video.reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reply::IsInitialized() const {

  return true;
}

void reply::Swap(reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void reply::InternalSwap(reply* other) {
  place_holder_.Swap(&other->place_holder_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reply_descriptor_;
  metadata.reflection = reply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// reply

// optional string place_holder = 1;
void reply::clear_place_holder() {
  place_holder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& reply::place_holder() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.reply.place_holder)
  return place_holder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void reply::set_place_holder(const ::std::string& value) {
  
  place_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarm_center_video.reply.place_holder)
}
 void reply::set_place_holder(const char* value) {
  
  place_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarm_center_video.reply.place_holder)
}
 void reply::set_place_holder(const char* value, size_t size) {
  
  place_holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarm_center_video.reply.place_holder)
}
 ::std::string* reply::mutable_place_holder() {
  
  // @@protoc_insertion_point(field_mutable:alarm_center_video.reply.place_holder)
  return place_holder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* reply::release_place_holder() {
  // @@protoc_insertion_point(field_release:alarm_center_video.reply.place_holder)
  
  return place_holder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void reply::set_allocated_place_holder(::std::string* place_holder) {
  if (place_holder != NULL) {
    
  } else {
    
  }
  place_holder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), place_holder);
  // @@protoc_insertion_point(field_set_allocated:alarm_center_video.reply.place_holder)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int is_show_mgr_dlg::kShowFieldNumber;
const int is_show_mgr_dlg::kUserLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

is_show_mgr_dlg::is_show_mgr_dlg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarm_center_video.is_show_mgr_dlg)
}

void is_show_mgr_dlg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

is_show_mgr_dlg::is_show_mgr_dlg(const is_show_mgr_dlg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:alarm_center_video.is_show_mgr_dlg)
}

void is_show_mgr_dlg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  show_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_level_ = 0;
}

is_show_mgr_dlg::~is_show_mgr_dlg() {
  // @@protoc_insertion_point(destructor:alarm_center_video.is_show_mgr_dlg)
  SharedDtor();
}

void is_show_mgr_dlg::SharedDtor() {
  show_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void is_show_mgr_dlg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* is_show_mgr_dlg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return is_show_mgr_dlg_descriptor_;
}

const is_show_mgr_dlg& is_show_mgr_dlg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alarm_5fcenter_5fvideo_2eproto();
  return *default_instance_;
}

is_show_mgr_dlg* is_show_mgr_dlg::default_instance_ = NULL;

is_show_mgr_dlg* is_show_mgr_dlg::New(::google::protobuf::Arena* arena) const {
  is_show_mgr_dlg* n = new is_show_mgr_dlg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void is_show_mgr_dlg::Clear() {
// @@protoc_insertion_point(message_clear_start:alarm_center_video.is_show_mgr_dlg)
  show_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_level_ = 0;
}

bool is_show_mgr_dlg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarm_center_video.is_show_mgr_dlg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string show = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_show()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->show().data(), this->show().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarm_center_video.is_show_mgr_dlg.show"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_level;
        break;
      }

      // optional int32 user_level = 2;
      case 2: {
        if (tag == 16) {
         parse_user_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_level_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarm_center_video.is_show_mgr_dlg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarm_center_video.is_show_mgr_dlg)
  return false;
#undef DO_
}

void is_show_mgr_dlg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarm_center_video.is_show_mgr_dlg)
  // optional string show = 1;
  if (this->show().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->show().data(), this->show().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.is_show_mgr_dlg.show");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->show(), output);
  }

  // optional int32 user_level = 2;
  if (this->user_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_level(), output);
  }

  // @@protoc_insertion_point(serialize_end:alarm_center_video.is_show_mgr_dlg)
}

::google::protobuf::uint8* is_show_mgr_dlg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:alarm_center_video.is_show_mgr_dlg)
  // optional string show = 1;
  if (this->show().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->show().data(), this->show().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.is_show_mgr_dlg.show");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->show(), target);
  }

  // optional int32 user_level = 2;
  if (this->user_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_level(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:alarm_center_video.is_show_mgr_dlg)
  return target;
}

int is_show_mgr_dlg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:alarm_center_video.is_show_mgr_dlg)
  int total_size = 0;

  // optional string show = 1;
  if (this->show().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->show());
  }

  // optional int32 user_level = 2;
  if (this->user_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->user_level());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void is_show_mgr_dlg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarm_center_video.is_show_mgr_dlg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const is_show_mgr_dlg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const is_show_mgr_dlg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarm_center_video.is_show_mgr_dlg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarm_center_video.is_show_mgr_dlg)
    MergeFrom(*source);
  }
}

void is_show_mgr_dlg::MergeFrom(const is_show_mgr_dlg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarm_center_video.is_show_mgr_dlg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.show().size() > 0) {

    show_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.show_);
  }
  if (from.user_level() != 0) {
    set_user_level(from.user_level());
  }
}

void is_show_mgr_dlg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarm_center_video.is_show_mgr_dlg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void is_show_mgr_dlg::CopyFrom(const is_show_mgr_dlg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarm_center_video.is_show_mgr_dlg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool is_show_mgr_dlg::IsInitialized() const {

  return true;
}

void is_show_mgr_dlg::Swap(is_show_mgr_dlg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void is_show_mgr_dlg::InternalSwap(is_show_mgr_dlg* other) {
  show_.Swap(&other->show_);
  std::swap(user_level_, other->user_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata is_show_mgr_dlg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = is_show_mgr_dlg_descriptor_;
  metadata.reflection = is_show_mgr_dlg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// is_show_mgr_dlg

// optional string show = 1;
void is_show_mgr_dlg::clear_show() {
  show_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& is_show_mgr_dlg::show() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.is_show_mgr_dlg.show)
  return show_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void is_show_mgr_dlg::set_show(const ::std::string& value) {
  
  show_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarm_center_video.is_show_mgr_dlg.show)
}
 void is_show_mgr_dlg::set_show(const char* value) {
  
  show_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarm_center_video.is_show_mgr_dlg.show)
}
 void is_show_mgr_dlg::set_show(const char* value, size_t size) {
  
  show_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarm_center_video.is_show_mgr_dlg.show)
}
 ::std::string* is_show_mgr_dlg::mutable_show() {
  
  // @@protoc_insertion_point(field_mutable:alarm_center_video.is_show_mgr_dlg.show)
  return show_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* is_show_mgr_dlg::release_show() {
  // @@protoc_insertion_point(field_release:alarm_center_video.is_show_mgr_dlg.show)
  
  return show_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void is_show_mgr_dlg::set_allocated_show(::std::string* show) {
  if (show != NULL) {
    
  } else {
    
  }
  show_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), show);
  // @@protoc_insertion_point(field_set_allocated:alarm_center_video.is_show_mgr_dlg.show)
}

// optional int32 user_level = 2;
void is_show_mgr_dlg::clear_user_level() {
  user_level_ = 0;
}
 ::google::protobuf::int32 is_show_mgr_dlg::user_level() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.is_show_mgr_dlg.user_level)
  return user_level_;
}
 void is_show_mgr_dlg::set_user_level(::google::protobuf::int32 value) {
  
  user_level_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_video.is_show_mgr_dlg.user_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int zone_uuid::kAdemcoIdFieldNumber;
const int zone_uuid::kZoneValueFieldNumber;
const int zone_uuid::kGgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

zone_uuid::zone_uuid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarm_center_video.zone_uuid)
}

void zone_uuid::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

zone_uuid::zone_uuid(const zone_uuid& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:alarm_center_video.zone_uuid)
}

void zone_uuid::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  ademco_id_ = 0;
  zone_value_ = 0;
  gg_ = 0;
}

zone_uuid::~zone_uuid() {
  // @@protoc_insertion_point(destructor:alarm_center_video.zone_uuid)
  SharedDtor();
}

void zone_uuid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void zone_uuid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* zone_uuid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return zone_uuid_descriptor_;
}

const zone_uuid& zone_uuid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alarm_5fcenter_5fvideo_2eproto();
  return *default_instance_;
}

zone_uuid* zone_uuid::default_instance_ = NULL;

zone_uuid* zone_uuid::New(::google::protobuf::Arena* arena) const {
  zone_uuid* n = new zone_uuid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void zone_uuid::Clear() {
// @@protoc_insertion_point(message_clear_start:alarm_center_video.zone_uuid)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(zone_uuid, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<zone_uuid*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ademco_id_, gg_);

#undef ZR_HELPER_
#undef ZR_

}

bool zone_uuid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarm_center_video.zone_uuid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ademco_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ademco_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zone_value;
        break;
      }

      // optional int32 zone_value = 2;
      case 2: {
        if (tag == 16) {
         parse_zone_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zone_value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gg;
        break;
      }

      // optional int32 gg = 3;
      case 3: {
        if (tag == 24) {
         parse_gg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gg_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarm_center_video.zone_uuid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarm_center_video.zone_uuid)
  return false;
#undef DO_
}

void zone_uuid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarm_center_video.zone_uuid)
  // optional int32 ademco_id = 1;
  if (this->ademco_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ademco_id(), output);
  }

  // optional int32 zone_value = 2;
  if (this->zone_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->zone_value(), output);
  }

  // optional int32 gg = 3;
  if (this->gg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gg(), output);
  }

  // @@protoc_insertion_point(serialize_end:alarm_center_video.zone_uuid)
}

::google::protobuf::uint8* zone_uuid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:alarm_center_video.zone_uuid)
  // optional int32 ademco_id = 1;
  if (this->ademco_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ademco_id(), target);
  }

  // optional int32 zone_value = 2;
  if (this->zone_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->zone_value(), target);
  }

  // optional int32 gg = 3;
  if (this->gg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:alarm_center_video.zone_uuid)
  return target;
}

int zone_uuid::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:alarm_center_video.zone_uuid)
  int total_size = 0;

  // optional int32 ademco_id = 1;
  if (this->ademco_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ademco_id());
  }

  // optional int32 zone_value = 2;
  if (this->zone_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zone_value());
  }

  // optional int32 gg = 3;
  if (this->gg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void zone_uuid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarm_center_video.zone_uuid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const zone_uuid* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const zone_uuid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarm_center_video.zone_uuid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarm_center_video.zone_uuid)
    MergeFrom(*source);
  }
}

void zone_uuid::MergeFrom(const zone_uuid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarm_center_video.zone_uuid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.ademco_id() != 0) {
    set_ademco_id(from.ademco_id());
  }
  if (from.zone_value() != 0) {
    set_zone_value(from.zone_value());
  }
  if (from.gg() != 0) {
    set_gg(from.gg());
  }
}

void zone_uuid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarm_center_video.zone_uuid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void zone_uuid::CopyFrom(const zone_uuid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarm_center_video.zone_uuid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool zone_uuid::IsInitialized() const {

  return true;
}

void zone_uuid::Swap(zone_uuid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void zone_uuid::InternalSwap(zone_uuid* other) {
  std::swap(ademco_id_, other->ademco_id_);
  std::swap(zone_value_, other->zone_value_);
  std::swap(gg_, other->gg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata zone_uuid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = zone_uuid_descriptor_;
  metadata.reflection = zone_uuid_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// zone_uuid

// optional int32 ademco_id = 1;
void zone_uuid::clear_ademco_id() {
  ademco_id_ = 0;
}
 ::google::protobuf::int32 zone_uuid::ademco_id() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.zone_uuid.ademco_id)
  return ademco_id_;
}
 void zone_uuid::set_ademco_id(::google::protobuf::int32 value) {
  
  ademco_id_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_video.zone_uuid.ademco_id)
}

// optional int32 zone_value = 2;
void zone_uuid::clear_zone_value() {
  zone_value_ = 0;
}
 ::google::protobuf::int32 zone_uuid::zone_value() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.zone_uuid.zone_value)
  return zone_value_;
}
 void zone_uuid::set_zone_value(::google::protobuf::int32 value) {
  
  zone_value_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_video.zone_uuid.zone_value)
}

// optional int32 gg = 3;
void zone_uuid::clear_gg() {
  gg_ = 0;
}
 ::google::protobuf::int32 zone_uuid::gg() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.zone_uuid.gg)
  return gg_;
}
 void zone_uuid::set_gg(::google::protobuf::int32 value) {
  
  gg_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_video.zone_uuid.gg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int camera_info::kDevIdFieldNumber;
const int camera_info::kProductorTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

camera_info::camera_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarm_center_video.camera_info)
}

void camera_info::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

camera_info::camera_info(const camera_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:alarm_center_video.camera_info)
}

void camera_info::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  dev_id_ = 0;
  productor_type_ = 0;
}

camera_info::~camera_info() {
  // @@protoc_insertion_point(destructor:alarm_center_video.camera_info)
  SharedDtor();
}

void camera_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void camera_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* camera_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return camera_info_descriptor_;
}

const camera_info& camera_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alarm_5fcenter_5fvideo_2eproto();
  return *default_instance_;
}

camera_info* camera_info::default_instance_ = NULL;

camera_info* camera_info::New(::google::protobuf::Arena* arena) const {
  camera_info* n = new camera_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void camera_info::Clear() {
// @@protoc_insertion_point(message_clear_start:alarm_center_video.camera_info)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(camera_info, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<camera_info*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(dev_id_, productor_type_);

#undef ZR_HELPER_
#undef ZR_

}

bool camera_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarm_center_video.camera_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dev_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dev_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_productor_type;
        break;
      }

      // optional int32 productor_type = 2;
      case 2: {
        if (tag == 16) {
         parse_productor_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productor_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarm_center_video.camera_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarm_center_video.camera_info)
  return false;
#undef DO_
}

void camera_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarm_center_video.camera_info)
  // optional int32 dev_id = 1;
  if (this->dev_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dev_id(), output);
  }

  // optional int32 productor_type = 2;
  if (this->productor_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->productor_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:alarm_center_video.camera_info)
}

::google::protobuf::uint8* camera_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:alarm_center_video.camera_info)
  // optional int32 dev_id = 1;
  if (this->dev_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dev_id(), target);
  }

  // optional int32 productor_type = 2;
  if (this->productor_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->productor_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:alarm_center_video.camera_info)
  return target;
}

int camera_info::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:alarm_center_video.camera_info)
  int total_size = 0;

  // optional int32 dev_id = 1;
  if (this->dev_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dev_id());
  }

  // optional int32 productor_type = 2;
  if (this->productor_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->productor_type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void camera_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarm_center_video.camera_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const camera_info* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const camera_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarm_center_video.camera_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarm_center_video.camera_info)
    MergeFrom(*source);
  }
}

void camera_info::MergeFrom(const camera_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarm_center_video.camera_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.dev_id() != 0) {
    set_dev_id(from.dev_id());
  }
  if (from.productor_type() != 0) {
    set_productor_type(from.productor_type());
  }
}

void camera_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarm_center_video.camera_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void camera_info::CopyFrom(const camera_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarm_center_video.camera_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool camera_info::IsInitialized() const {

  return true;
}

void camera_info::Swap(camera_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void camera_info::InternalSwap(camera_info* other) {
  std::swap(dev_id_, other->dev_id_);
  std::swap(productor_type_, other->productor_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata camera_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = camera_info_descriptor_;
  metadata.reflection = camera_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// camera_info

// optional int32 dev_id = 1;
void camera_info::clear_dev_id() {
  dev_id_ = 0;
}
 ::google::protobuf::int32 camera_info::dev_id() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.camera_info.dev_id)
  return dev_id_;
}
 void camera_info::set_dev_id(::google::protobuf::int32 value) {
  
  dev_id_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_video.camera_info.dev_id)
}

// optional int32 productor_type = 2;
void camera_info::clear_productor_type() {
  productor_type_ = 0;
}
 ::google::protobuf::int32 camera_info::productor_type() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.camera_info.productor_type)
  return productor_type_;
}
 void camera_info::set_productor_type(::google::protobuf::int32 value) {
  
  productor_type_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_video.camera_info.productor_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int dev_info::kDevIdFieldNumber;
const int dev_info::kProductorTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

dev_info::dev_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarm_center_video.dev_info)
}

void dev_info::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

dev_info::dev_info(const dev_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:alarm_center_video.dev_info)
}

void dev_info::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  dev_id_ = 0;
  productor_type_ = 0;
}

dev_info::~dev_info() {
  // @@protoc_insertion_point(destructor:alarm_center_video.dev_info)
  SharedDtor();
}

void dev_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dev_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dev_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dev_info_descriptor_;
}

const dev_info& dev_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alarm_5fcenter_5fvideo_2eproto();
  return *default_instance_;
}

dev_info* dev_info::default_instance_ = NULL;

dev_info* dev_info::New(::google::protobuf::Arena* arena) const {
  dev_info* n = new dev_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void dev_info::Clear() {
// @@protoc_insertion_point(message_clear_start:alarm_center_video.dev_info)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(dev_info, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<dev_info*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(dev_id_, productor_type_);

#undef ZR_HELPER_
#undef ZR_

}

bool dev_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarm_center_video.dev_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dev_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dev_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_productor_type;
        break;
      }

      // optional int32 productor_type = 2;
      case 2: {
        if (tag == 16) {
         parse_productor_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productor_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarm_center_video.dev_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarm_center_video.dev_info)
  return false;
#undef DO_
}

void dev_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarm_center_video.dev_info)
  // optional int32 dev_id = 1;
  if (this->dev_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dev_id(), output);
  }

  // optional int32 productor_type = 2;
  if (this->productor_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->productor_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:alarm_center_video.dev_info)
}

::google::protobuf::uint8* dev_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:alarm_center_video.dev_info)
  // optional int32 dev_id = 1;
  if (this->dev_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dev_id(), target);
  }

  // optional int32 productor_type = 2;
  if (this->productor_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->productor_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:alarm_center_video.dev_info)
  return target;
}

int dev_info::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:alarm_center_video.dev_info)
  int total_size = 0;

  // optional int32 dev_id = 1;
  if (this->dev_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dev_id());
  }

  // optional int32 productor_type = 2;
  if (this->productor_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->productor_type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dev_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarm_center_video.dev_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const dev_info* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const dev_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarm_center_video.dev_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarm_center_video.dev_info)
    MergeFrom(*source);
  }
}

void dev_info::MergeFrom(const dev_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarm_center_video.dev_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.dev_id() != 0) {
    set_dev_id(from.dev_id());
  }
  if (from.productor_type() != 0) {
    set_productor_type(from.productor_type());
  }
}

void dev_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarm_center_video.dev_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dev_info::CopyFrom(const dev_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarm_center_video.dev_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dev_info::IsInitialized() const {

  return true;
}

void dev_info::Swap(dev_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void dev_info::InternalSwap(dev_info* other) {
  std::swap(dev_id_, other->dev_id_);
  std::swap(productor_type_, other->productor_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata dev_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dev_info_descriptor_;
  metadata.reflection = dev_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// dev_info

// optional int32 dev_id = 1;
void dev_info::clear_dev_id() {
  dev_id_ = 0;
}
 ::google::protobuf::int32 dev_info::dev_id() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.dev_info.dev_id)
  return dev_id_;
}
 void dev_info::set_dev_id(::google::protobuf::int32 value) {
  
  dev_id_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_video.dev_info.dev_id)
}

// optional int32 productor_type = 2;
void dev_info::clear_productor_type() {
  productor_type_ = 0;
}
 ::google::protobuf::int32 dev_info::productor_type() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.dev_info.productor_type)
  return productor_type_;
}
 void dev_info::set_productor_type(::google::protobuf::int32 value) {
  
  productor_type_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_video.dev_info.productor_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int alarm_text::kZoneValueFieldNumber;
const int alarm_text::kSubZoneFieldNumber;
const int alarm_text::kEventCodeFieldNumber;
const int alarm_text::kAlarmTxtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

alarm_text::alarm_text()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarm_center_video.alarm_text)
}

void alarm_text::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

alarm_text::alarm_text(const alarm_text& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:alarm_center_video.alarm_text)
}

void alarm_text::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  zone_value_ = 0;
  sub_zone_ = 0;
  event_code_ = 0;
  alarm_txt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

alarm_text::~alarm_text() {
  // @@protoc_insertion_point(destructor:alarm_center_video.alarm_text)
  SharedDtor();
}

void alarm_text::SharedDtor() {
  alarm_txt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void alarm_text::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* alarm_text::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return alarm_text_descriptor_;
}

const alarm_text& alarm_text::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alarm_5fcenter_5fvideo_2eproto();
  return *default_instance_;
}

alarm_text* alarm_text::default_instance_ = NULL;

alarm_text* alarm_text::New(::google::protobuf::Arena* arena) const {
  alarm_text* n = new alarm_text;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void alarm_text::Clear() {
// @@protoc_insertion_point(message_clear_start:alarm_center_video.alarm_text)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(alarm_text, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<alarm_text*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(zone_value_, sub_zone_);
  event_code_ = 0;
  alarm_txt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool alarm_text::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarm_center_video.alarm_text)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 zone_value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zone_value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sub_zone;
        break;
      }

      // optional int32 sub_zone = 2;
      case 2: {
        if (tag == 16) {
         parse_sub_zone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_zone_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_event_code;
        break;
      }

      // optional int32 event_code = 3;
      case 3: {
        if (tag == 24) {
         parse_event_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_alarm_txt;
        break;
      }

      // optional string alarm_txt = 4;
      case 4: {
        if (tag == 34) {
         parse_alarm_txt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alarm_txt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alarm_txt().data(), this->alarm_txt().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarm_center_video.alarm_text.alarm_txt"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarm_center_video.alarm_text)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarm_center_video.alarm_text)
  return false;
#undef DO_
}

void alarm_text::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarm_center_video.alarm_text)
  // optional int32 zone_value = 1;
  if (this->zone_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->zone_value(), output);
  }

  // optional int32 sub_zone = 2;
  if (this->sub_zone() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sub_zone(), output);
  }

  // optional int32 event_code = 3;
  if (this->event_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->event_code(), output);
  }

  // optional string alarm_txt = 4;
  if (this->alarm_txt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alarm_txt().data(), this->alarm_txt().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.alarm_text.alarm_txt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->alarm_txt(), output);
  }

  // @@protoc_insertion_point(serialize_end:alarm_center_video.alarm_text)
}

::google::protobuf::uint8* alarm_text::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:alarm_center_video.alarm_text)
  // optional int32 zone_value = 1;
  if (this->zone_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->zone_value(), target);
  }

  // optional int32 sub_zone = 2;
  if (this->sub_zone() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sub_zone(), target);
  }

  // optional int32 event_code = 3;
  if (this->event_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->event_code(), target);
  }

  // optional string alarm_txt = 4;
  if (this->alarm_txt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alarm_txt().data(), this->alarm_txt().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.alarm_text.alarm_txt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->alarm_txt(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:alarm_center_video.alarm_text)
  return target;
}

int alarm_text::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:alarm_center_video.alarm_text)
  int total_size = 0;

  // optional int32 zone_value = 1;
  if (this->zone_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zone_value());
  }

  // optional int32 sub_zone = 2;
  if (this->sub_zone() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sub_zone());
  }

  // optional int32 event_code = 3;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->event_code());
  }

  // optional string alarm_txt = 4;
  if (this->alarm_txt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alarm_txt());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void alarm_text::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarm_center_video.alarm_text)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const alarm_text* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const alarm_text>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarm_center_video.alarm_text)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarm_center_video.alarm_text)
    MergeFrom(*source);
  }
}

void alarm_text::MergeFrom(const alarm_text& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarm_center_video.alarm_text)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.zone_value() != 0) {
    set_zone_value(from.zone_value());
  }
  if (from.sub_zone() != 0) {
    set_sub_zone(from.sub_zone());
  }
  if (from.event_code() != 0) {
    set_event_code(from.event_code());
  }
  if (from.alarm_txt().size() > 0) {

    alarm_txt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alarm_txt_);
  }
}

void alarm_text::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarm_center_video.alarm_text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void alarm_text::CopyFrom(const alarm_text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarm_center_video.alarm_text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool alarm_text::IsInitialized() const {

  return true;
}

void alarm_text::Swap(alarm_text* other) {
  if (other == this) return;
  InternalSwap(other);
}
void alarm_text::InternalSwap(alarm_text* other) {
  std::swap(zone_value_, other->zone_value_);
  std::swap(sub_zone_, other->sub_zone_);
  std::swap(event_code_, other->event_code_);
  alarm_txt_.Swap(&other->alarm_txt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata alarm_text::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = alarm_text_descriptor_;
  metadata.reflection = alarm_text_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// alarm_text

// optional int32 zone_value = 1;
void alarm_text::clear_zone_value() {
  zone_value_ = 0;
}
 ::google::protobuf::int32 alarm_text::zone_value() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.alarm_text.zone_value)
  return zone_value_;
}
 void alarm_text::set_zone_value(::google::protobuf::int32 value) {
  
  zone_value_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_video.alarm_text.zone_value)
}

// optional int32 sub_zone = 2;
void alarm_text::clear_sub_zone() {
  sub_zone_ = 0;
}
 ::google::protobuf::int32 alarm_text::sub_zone() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.alarm_text.sub_zone)
  return sub_zone_;
}
 void alarm_text::set_sub_zone(::google::protobuf::int32 value) {
  
  sub_zone_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_video.alarm_text.sub_zone)
}

// optional int32 event_code = 3;
void alarm_text::clear_event_code() {
  event_code_ = 0;
}
 ::google::protobuf::int32 alarm_text::event_code() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.alarm_text.event_code)
  return event_code_;
}
 void alarm_text::set_event_code(::google::protobuf::int32 value) {
  
  event_code_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_video.alarm_text.event_code)
}

// optional string alarm_txt = 4;
void alarm_text::clear_alarm_txt() {
  alarm_txt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& alarm_text::alarm_txt() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.alarm_text.alarm_txt)
  return alarm_txt_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void alarm_text::set_alarm_txt(const ::std::string& value) {
  
  alarm_txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarm_center_video.alarm_text.alarm_txt)
}
 void alarm_text::set_alarm_txt(const char* value) {
  
  alarm_txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarm_center_video.alarm_text.alarm_txt)
}
 void alarm_text::set_alarm_txt(const char* value, size_t size) {
  
  alarm_txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarm_center_video.alarm_text.alarm_txt)
}
 ::std::string* alarm_text::mutable_alarm_txt() {
  
  // @@protoc_insertion_point(field_mutable:alarm_center_video.alarm_text.alarm_txt)
  return alarm_txt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* alarm_text::release_alarm_txt() {
  // @@protoc_insertion_point(field_release:alarm_center_video.alarm_text.alarm_txt)
  
  return alarm_txt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void alarm_text::set_allocated_alarm_txt(::std::string* alarm_txt) {
  if (alarm_txt != NULL) {
    
  } else {
    
  }
  alarm_txt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alarm_txt);
  // @@protoc_insertion_point(field_set_allocated:alarm_center_video.alarm_text.alarm_txt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int alarm_info::kDevinfoFieldNumber;
const int alarm_info::kZoneUuidFieldNumber;
const int alarm_info::kAlarmTxtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

alarm_info::alarm_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarm_center_video.alarm_info)
}

void alarm_info::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  devinfo_ = const_cast< ::alarm_center_video::dev_info*>(&::alarm_center_video::dev_info::default_instance());
  zone_uuid_ = const_cast< ::alarm_center_video::zone_uuid*>(&::alarm_center_video::zone_uuid::default_instance());
  alarm_txt_ = const_cast< ::alarm_center_video::alarm_text*>(&::alarm_center_video::alarm_text::default_instance());
}

alarm_info::alarm_info(const alarm_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:alarm_center_video.alarm_info)
}

void alarm_info::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  devinfo_ = NULL;
  zone_uuid_ = NULL;
  alarm_txt_ = NULL;
}

alarm_info::~alarm_info() {
  // @@protoc_insertion_point(destructor:alarm_center_video.alarm_info)
  SharedDtor();
}

void alarm_info::SharedDtor() {
  if (this != default_instance_) {
    delete devinfo_;
    delete zone_uuid_;
    delete alarm_txt_;
  }
}

void alarm_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* alarm_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return alarm_info_descriptor_;
}

const alarm_info& alarm_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alarm_5fcenter_5fvideo_2eproto();
  return *default_instance_;
}

alarm_info* alarm_info::default_instance_ = NULL;

alarm_info* alarm_info::New(::google::protobuf::Arena* arena) const {
  alarm_info* n = new alarm_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void alarm_info::Clear() {
// @@protoc_insertion_point(message_clear_start:alarm_center_video.alarm_info)
  if (GetArenaNoVirtual() == NULL && devinfo_ != NULL) delete devinfo_;
  devinfo_ = NULL;
  if (GetArenaNoVirtual() == NULL && zone_uuid_ != NULL) delete zone_uuid_;
  zone_uuid_ = NULL;
  if (GetArenaNoVirtual() == NULL && alarm_txt_ != NULL) delete alarm_txt_;
  alarm_txt_ = NULL;
}

bool alarm_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarm_center_video.alarm_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .alarm_center_video.dev_info devinfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_devinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_zone_uuid;
        break;
      }

      // optional .alarm_center_video.zone_uuid zone_uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_zone_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_zone_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_alarm_txt;
        break;
      }

      // optional .alarm_center_video.alarm_text alarm_txt = 3;
      case 3: {
        if (tag == 26) {
         parse_alarm_txt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alarm_txt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarm_center_video.alarm_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarm_center_video.alarm_info)
  return false;
#undef DO_
}

void alarm_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarm_center_video.alarm_info)
  // optional .alarm_center_video.dev_info devinfo = 1;
  if (this->has_devinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->devinfo_, output);
  }

  // optional .alarm_center_video.zone_uuid zone_uuid = 2;
  if (this->has_zone_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->zone_uuid_, output);
  }

  // optional .alarm_center_video.alarm_text alarm_txt = 3;
  if (this->has_alarm_txt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->alarm_txt_, output);
  }

  // @@protoc_insertion_point(serialize_end:alarm_center_video.alarm_info)
}

::google::protobuf::uint8* alarm_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:alarm_center_video.alarm_info)
  // optional .alarm_center_video.dev_info devinfo = 1;
  if (this->has_devinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->devinfo_, target);
  }

  // optional .alarm_center_video.zone_uuid zone_uuid = 2;
  if (this->has_zone_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->zone_uuid_, target);
  }

  // optional .alarm_center_video.alarm_text alarm_txt = 3;
  if (this->has_alarm_txt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->alarm_txt_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:alarm_center_video.alarm_info)
  return target;
}

int alarm_info::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:alarm_center_video.alarm_info)
  int total_size = 0;

  // optional .alarm_center_video.dev_info devinfo = 1;
  if (this->has_devinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->devinfo_);
  }

  // optional .alarm_center_video.zone_uuid zone_uuid = 2;
  if (this->has_zone_uuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->zone_uuid_);
  }

  // optional .alarm_center_video.alarm_text alarm_txt = 3;
  if (this->has_alarm_txt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->alarm_txt_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void alarm_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarm_center_video.alarm_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const alarm_info* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const alarm_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarm_center_video.alarm_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarm_center_video.alarm_info)
    MergeFrom(*source);
  }
}

void alarm_info::MergeFrom(const alarm_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarm_center_video.alarm_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_devinfo()) {
    mutable_devinfo()->::alarm_center_video::dev_info::MergeFrom(from.devinfo());
  }
  if (from.has_zone_uuid()) {
    mutable_zone_uuid()->::alarm_center_video::zone_uuid::MergeFrom(from.zone_uuid());
  }
  if (from.has_alarm_txt()) {
    mutable_alarm_txt()->::alarm_center_video::alarm_text::MergeFrom(from.alarm_txt());
  }
}

void alarm_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarm_center_video.alarm_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void alarm_info::CopyFrom(const alarm_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarm_center_video.alarm_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool alarm_info::IsInitialized() const {

  return true;
}

void alarm_info::Swap(alarm_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void alarm_info::InternalSwap(alarm_info* other) {
  std::swap(devinfo_, other->devinfo_);
  std::swap(zone_uuid_, other->zone_uuid_);
  std::swap(alarm_txt_, other->alarm_txt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata alarm_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = alarm_info_descriptor_;
  metadata.reflection = alarm_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// alarm_info

// optional .alarm_center_video.dev_info devinfo = 1;
bool alarm_info::has_devinfo() const {
  return !_is_default_instance_ && devinfo_ != NULL;
}
void alarm_info::clear_devinfo() {
  if (GetArenaNoVirtual() == NULL && devinfo_ != NULL) delete devinfo_;
  devinfo_ = NULL;
}
const ::alarm_center_video::dev_info& alarm_info::devinfo() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.alarm_info.devinfo)
  return devinfo_ != NULL ? *devinfo_ : *default_instance_->devinfo_;
}
::alarm_center_video::dev_info* alarm_info::mutable_devinfo() {
  
  if (devinfo_ == NULL) {
    devinfo_ = new ::alarm_center_video::dev_info;
  }
  // @@protoc_insertion_point(field_mutable:alarm_center_video.alarm_info.devinfo)
  return devinfo_;
}
::alarm_center_video::dev_info* alarm_info::release_devinfo() {
  // @@protoc_insertion_point(field_release:alarm_center_video.alarm_info.devinfo)
  
  ::alarm_center_video::dev_info* temp = devinfo_;
  devinfo_ = NULL;
  return temp;
}
void alarm_info::set_allocated_devinfo(::alarm_center_video::dev_info* devinfo) {
  delete devinfo_;
  devinfo_ = devinfo;
  if (devinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarm_center_video.alarm_info.devinfo)
}

// optional .alarm_center_video.zone_uuid zone_uuid = 2;
bool alarm_info::has_zone_uuid() const {
  return !_is_default_instance_ && zone_uuid_ != NULL;
}
void alarm_info::clear_zone_uuid() {
  if (GetArenaNoVirtual() == NULL && zone_uuid_ != NULL) delete zone_uuid_;
  zone_uuid_ = NULL;
}
const ::alarm_center_video::zone_uuid& alarm_info::zone_uuid() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.alarm_info.zone_uuid)
  return zone_uuid_ != NULL ? *zone_uuid_ : *default_instance_->zone_uuid_;
}
::alarm_center_video::zone_uuid* alarm_info::mutable_zone_uuid() {
  
  if (zone_uuid_ == NULL) {
    zone_uuid_ = new ::alarm_center_video::zone_uuid;
  }
  // @@protoc_insertion_point(field_mutable:alarm_center_video.alarm_info.zone_uuid)
  return zone_uuid_;
}
::alarm_center_video::zone_uuid* alarm_info::release_zone_uuid() {
  // @@protoc_insertion_point(field_release:alarm_center_video.alarm_info.zone_uuid)
  
  ::alarm_center_video::zone_uuid* temp = zone_uuid_;
  zone_uuid_ = NULL;
  return temp;
}
void alarm_info::set_allocated_zone_uuid(::alarm_center_video::zone_uuid* zone_uuid) {
  delete zone_uuid_;
  zone_uuid_ = zone_uuid;
  if (zone_uuid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarm_center_video.alarm_info.zone_uuid)
}

// optional .alarm_center_video.alarm_text alarm_txt = 3;
bool alarm_info::has_alarm_txt() const {
  return !_is_default_instance_ && alarm_txt_ != NULL;
}
void alarm_info::clear_alarm_txt() {
  if (GetArenaNoVirtual() == NULL && alarm_txt_ != NULL) delete alarm_txt_;
  alarm_txt_ = NULL;
}
const ::alarm_center_video::alarm_text& alarm_info::alarm_txt() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.alarm_info.alarm_txt)
  return alarm_txt_ != NULL ? *alarm_txt_ : *default_instance_->alarm_txt_;
}
::alarm_center_video::alarm_text* alarm_info::mutable_alarm_txt() {
  
  if (alarm_txt_ == NULL) {
    alarm_txt_ = new ::alarm_center_video::alarm_text;
  }
  // @@protoc_insertion_point(field_mutable:alarm_center_video.alarm_info.alarm_txt)
  return alarm_txt_;
}
::alarm_center_video::alarm_text* alarm_info::release_alarm_txt() {
  // @@protoc_insertion_point(field_release:alarm_center_video.alarm_info.alarm_txt)
  
  ::alarm_center_video::alarm_text* temp = alarm_txt_;
  alarm_txt_ = NULL;
  return temp;
}
void alarm_info::set_allocated_alarm_txt(::alarm_center_video::alarm_text* alarm_txt) {
  delete alarm_txt_;
  alarm_txt_ = alarm_txt;
  if (alarm_txt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarm_center_video.alarm_info.alarm_txt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bind_info::kUuidFieldNumber;
const int bind_info::kDevFieldNumber;
const int bind_info::kBindFieldNumber;
const int bind_info::kAutoPopupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bind_info::bind_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarm_center_video.bind_info)
}

void bind_info::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  uuid_ = const_cast< ::alarm_center_video::zone_uuid*>(&::alarm_center_video::zone_uuid::default_instance());
  dev_ = const_cast< ::alarm_center_video::dev_info*>(&::alarm_center_video::dev_info::default_instance());
}

bind_info::bind_info(const bind_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:alarm_center_video.bind_info)
}

void bind_info::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  uuid_ = NULL;
  dev_ = NULL;
  bind_ = false;
  auto_popup_ = false;
}

bind_info::~bind_info() {
  // @@protoc_insertion_point(destructor:alarm_center_video.bind_info)
  SharedDtor();
}

void bind_info::SharedDtor() {
  if (this != default_instance_) {
    delete uuid_;
    delete dev_;
  }
}

void bind_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bind_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bind_info_descriptor_;
}

const bind_info& bind_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alarm_5fcenter_5fvideo_2eproto();
  return *default_instance_;
}

bind_info* bind_info::default_instance_ = NULL;

bind_info* bind_info::New(::google::protobuf::Arena* arena) const {
  bind_info* n = new bind_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void bind_info::Clear() {
// @@protoc_insertion_point(message_clear_start:alarm_center_video.bind_info)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(bind_info, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<bind_info*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(bind_, auto_popup_);
  if (GetArenaNoVirtual() == NULL && uuid_ != NULL) delete uuid_;
  uuid_ = NULL;
  if (GetArenaNoVirtual() == NULL && dev_ != NULL) delete dev_;
  dev_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool bind_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarm_center_video.bind_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .alarm_center_video.zone_uuid uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dev;
        break;
      }

      // optional .alarm_center_video.dev_info dev = 2;
      case 2: {
        if (tag == 18) {
         parse_dev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dev()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bind;
        break;
      }

      // optional bool bind = 3;
      case 3: {
        if (tag == 24) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bind_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_auto_popup;
        break;
      }

      // optional bool auto_popup = 4;
      case 4: {
        if (tag == 32) {
         parse_auto_popup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_popup_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarm_center_video.bind_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarm_center_video.bind_info)
  return false;
#undef DO_
}

void bind_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarm_center_video.bind_info)
  // optional .alarm_center_video.zone_uuid uuid = 1;
  if (this->has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->uuid_, output);
  }

  // optional .alarm_center_video.dev_info dev = 2;
  if (this->has_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->dev_, output);
  }

  // optional bool bind = 3;
  if (this->bind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bind(), output);
  }

  // optional bool auto_popup = 4;
  if (this->auto_popup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->auto_popup(), output);
  }

  // @@protoc_insertion_point(serialize_end:alarm_center_video.bind_info)
}

::google::protobuf::uint8* bind_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:alarm_center_video.bind_info)
  // optional .alarm_center_video.zone_uuid uuid = 1;
  if (this->has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->uuid_, target);
  }

  // optional .alarm_center_video.dev_info dev = 2;
  if (this->has_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->dev_, target);
  }

  // optional bool bind = 3;
  if (this->bind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bind(), target);
  }

  // optional bool auto_popup = 4;
  if (this->auto_popup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->auto_popup(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:alarm_center_video.bind_info)
  return target;
}

int bind_info::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:alarm_center_video.bind_info)
  int total_size = 0;

  // optional .alarm_center_video.zone_uuid uuid = 1;
  if (this->has_uuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->uuid_);
  }

  // optional .alarm_center_video.dev_info dev = 2;
  if (this->has_dev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dev_);
  }

  // optional bool bind = 3;
  if (this->bind() != 0) {
    total_size += 1 + 1;
  }

  // optional bool auto_popup = 4;
  if (this->auto_popup() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bind_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarm_center_video.bind_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const bind_info* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const bind_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarm_center_video.bind_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarm_center_video.bind_info)
    MergeFrom(*source);
  }
}

void bind_info::MergeFrom(const bind_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarm_center_video.bind_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_uuid()) {
    mutable_uuid()->::alarm_center_video::zone_uuid::MergeFrom(from.uuid());
  }
  if (from.has_dev()) {
    mutable_dev()->::alarm_center_video::dev_info::MergeFrom(from.dev());
  }
  if (from.bind() != 0) {
    set_bind(from.bind());
  }
  if (from.auto_popup() != 0) {
    set_auto_popup(from.auto_popup());
  }
}

void bind_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarm_center_video.bind_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bind_info::CopyFrom(const bind_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarm_center_video.bind_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bind_info::IsInitialized() const {

  return true;
}

void bind_info::Swap(bind_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bind_info::InternalSwap(bind_info* other) {
  std::swap(uuid_, other->uuid_);
  std::swap(dev_, other->dev_);
  std::swap(bind_, other->bind_);
  std::swap(auto_popup_, other->auto_popup_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata bind_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bind_info_descriptor_;
  metadata.reflection = bind_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// bind_info

// optional .alarm_center_video.zone_uuid uuid = 1;
bool bind_info::has_uuid() const {
  return !_is_default_instance_ && uuid_ != NULL;
}
void bind_info::clear_uuid() {
  if (GetArenaNoVirtual() == NULL && uuid_ != NULL) delete uuid_;
  uuid_ = NULL;
}
const ::alarm_center_video::zone_uuid& bind_info::uuid() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.bind_info.uuid)
  return uuid_ != NULL ? *uuid_ : *default_instance_->uuid_;
}
::alarm_center_video::zone_uuid* bind_info::mutable_uuid() {
  
  if (uuid_ == NULL) {
    uuid_ = new ::alarm_center_video::zone_uuid;
  }
  // @@protoc_insertion_point(field_mutable:alarm_center_video.bind_info.uuid)
  return uuid_;
}
::alarm_center_video::zone_uuid* bind_info::release_uuid() {
  // @@protoc_insertion_point(field_release:alarm_center_video.bind_info.uuid)
  
  ::alarm_center_video::zone_uuid* temp = uuid_;
  uuid_ = NULL;
  return temp;
}
void bind_info::set_allocated_uuid(::alarm_center_video::zone_uuid* uuid) {
  delete uuid_;
  uuid_ = uuid;
  if (uuid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarm_center_video.bind_info.uuid)
}

// optional .alarm_center_video.dev_info dev = 2;
bool bind_info::has_dev() const {
  return !_is_default_instance_ && dev_ != NULL;
}
void bind_info::clear_dev() {
  if (GetArenaNoVirtual() == NULL && dev_ != NULL) delete dev_;
  dev_ = NULL;
}
const ::alarm_center_video::dev_info& bind_info::dev() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.bind_info.dev)
  return dev_ != NULL ? *dev_ : *default_instance_->dev_;
}
::alarm_center_video::dev_info* bind_info::mutable_dev() {
  
  if (dev_ == NULL) {
    dev_ = new ::alarm_center_video::dev_info;
  }
  // @@protoc_insertion_point(field_mutable:alarm_center_video.bind_info.dev)
  return dev_;
}
::alarm_center_video::dev_info* bind_info::release_dev() {
  // @@protoc_insertion_point(field_release:alarm_center_video.bind_info.dev)
  
  ::alarm_center_video::dev_info* temp = dev_;
  dev_ = NULL;
  return temp;
}
void bind_info::set_allocated_dev(::alarm_center_video::dev_info* dev) {
  delete dev_;
  dev_ = dev;
  if (dev) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarm_center_video.bind_info.dev)
}

// optional bool bind = 3;
void bind_info::clear_bind() {
  bind_ = false;
}
 bool bind_info::bind() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.bind_info.bind)
  return bind_;
}
 void bind_info::set_bind(bool value) {
  
  bind_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_video.bind_info.bind)
}

// optional bool auto_popup = 4;
void bind_info::clear_auto_popup() {
  auto_popup_ = false;
}
 bool bind_info::auto_popup() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.bind_info.auto_popup)
  return auto_popup_;
}
 void bind_info::set_auto_popup(bool value) {
  
  auto_popup_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_video.bind_info.auto_popup)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hisroty_record::kAdemcoIdFieldNumber;
const int hisroty_record::kZoneValueFieldNumber;
const int hisroty_record::kRecordFieldNumber;
const int hisroty_record::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hisroty_record::hisroty_record()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarm_center_video.hisroty_record)
}

void hisroty_record::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

hisroty_record::hisroty_record(const hisroty_record& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:alarm_center_video.hisroty_record)
}

void hisroty_record::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ademco_id_ = 0;
  zone_value_ = 0;
  record_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

hisroty_record::~hisroty_record() {
  // @@protoc_insertion_point(destructor:alarm_center_video.hisroty_record)
  SharedDtor();
}

void hisroty_record::SharedDtor() {
  record_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void hisroty_record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hisroty_record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hisroty_record_descriptor_;
}

const hisroty_record& hisroty_record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alarm_5fcenter_5fvideo_2eproto();
  return *default_instance_;
}

hisroty_record* hisroty_record::default_instance_ = NULL;

hisroty_record* hisroty_record::New(::google::protobuf::Arena* arena) const {
  hisroty_record* n = new hisroty_record;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hisroty_record::Clear() {
// @@protoc_insertion_point(message_clear_start:alarm_center_video.hisroty_record)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(hisroty_record, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<hisroty_record*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ademco_id_, zone_value_);
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool hisroty_record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarm_center_video.hisroty_record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ademco_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ademco_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zone_value;
        break;
      }

      // optional int32 zone_value = 2;
      case 2: {
        if (tag == 16) {
         parse_zone_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zone_value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_record;
        break;
      }

      // optional string record = 3;
      case 3: {
        if (tag == 26) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->record().data(), this->record().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarm_center_video.hisroty_record.record"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 4;
      case 4: {
        if (tag == 34) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarm_center_video.hisroty_record.timestamp"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarm_center_video.hisroty_record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarm_center_video.hisroty_record)
  return false;
#undef DO_
}

void hisroty_record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarm_center_video.hisroty_record)
  // optional int32 ademco_id = 1;
  if (this->ademco_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ademco_id(), output);
  }

  // optional int32 zone_value = 2;
  if (this->zone_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->zone_value(), output);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.hisroty_record.record");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->record(), output);
  }

  // optional string timestamp = 4;
  if (this->timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.hisroty_record.timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:alarm_center_video.hisroty_record)
}

::google::protobuf::uint8* hisroty_record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:alarm_center_video.hisroty_record)
  // optional int32 ademco_id = 1;
  if (this->ademco_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ademco_id(), target);
  }

  // optional int32 zone_value = 2;
  if (this->zone_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->zone_value(), target);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.hisroty_record.record");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->record(), target);
  }

  // optional string timestamp = 4;
  if (this->timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_video.hisroty_record.timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:alarm_center_video.hisroty_record)
  return target;
}

int hisroty_record::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:alarm_center_video.hisroty_record)
  int total_size = 0;

  // optional int32 ademco_id = 1;
  if (this->ademco_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ademco_id());
  }

  // optional int32 zone_value = 2;
  if (this->zone_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zone_value());
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->record());
  }

  // optional string timestamp = 4;
  if (this->timestamp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hisroty_record::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarm_center_video.hisroty_record)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hisroty_record* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const hisroty_record>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarm_center_video.hisroty_record)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarm_center_video.hisroty_record)
    MergeFrom(*source);
  }
}

void hisroty_record::MergeFrom(const hisroty_record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarm_center_video.hisroty_record)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.ademco_id() != 0) {
    set_ademco_id(from.ademco_id());
  }
  if (from.zone_value() != 0) {
    set_zone_value(from.zone_value());
  }
  if (from.record().size() > 0) {

    record_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_);
  }
  if (from.timestamp().size() > 0) {

    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
}

void hisroty_record::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarm_center_video.hisroty_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hisroty_record::CopyFrom(const hisroty_record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarm_center_video.hisroty_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hisroty_record::IsInitialized() const {

  return true;
}

void hisroty_record::Swap(hisroty_record* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hisroty_record::InternalSwap(hisroty_record* other) {
  std::swap(ademco_id_, other->ademco_id_);
  std::swap(zone_value_, other->zone_value_);
  record_.Swap(&other->record_);
  timestamp_.Swap(&other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hisroty_record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hisroty_record_descriptor_;
  metadata.reflection = hisroty_record_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hisroty_record

// optional int32 ademco_id = 1;
void hisroty_record::clear_ademco_id() {
  ademco_id_ = 0;
}
 ::google::protobuf::int32 hisroty_record::ademco_id() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.hisroty_record.ademco_id)
  return ademco_id_;
}
 void hisroty_record::set_ademco_id(::google::protobuf::int32 value) {
  
  ademco_id_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_video.hisroty_record.ademco_id)
}

// optional int32 zone_value = 2;
void hisroty_record::clear_zone_value() {
  zone_value_ = 0;
}
 ::google::protobuf::int32 hisroty_record::zone_value() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.hisroty_record.zone_value)
  return zone_value_;
}
 void hisroty_record::set_zone_value(::google::protobuf::int32 value) {
  
  zone_value_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_video.hisroty_record.zone_value)
}

// optional string record = 3;
void hisroty_record::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& hisroty_record::record() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.hisroty_record.record)
  return record_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void hisroty_record::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarm_center_video.hisroty_record.record)
}
 void hisroty_record::set_record(const char* value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarm_center_video.hisroty_record.record)
}
 void hisroty_record::set_record(const char* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarm_center_video.hisroty_record.record)
}
 ::std::string* hisroty_record::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:alarm_center_video.hisroty_record.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* hisroty_record::release_record() {
  // @@protoc_insertion_point(field_release:alarm_center_video.hisroty_record.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void hisroty_record::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:alarm_center_video.hisroty_record.record)
}

// optional string timestamp = 4;
void hisroty_record::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& hisroty_record::timestamp() const {
  // @@protoc_insertion_point(field_get:alarm_center_video.hisroty_record.timestamp)
  return timestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void hisroty_record::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarm_center_video.hisroty_record.timestamp)
}
 void hisroty_record::set_timestamp(const char* value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarm_center_video.hisroty_record.timestamp)
}
 void hisroty_record::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarm_center_video.hisroty_record.timestamp)
}
 ::std::string* hisroty_record::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:alarm_center_video.hisroty_record.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* hisroty_record::release_timestamp() {
  // @@protoc_insertion_point(field_release:alarm_center_video.hisroty_record.timestamp)
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void hisroty_record::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:alarm_center_video.hisroty_record.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace alarm_center_video

// @@protoc_insertion_point(global_scope)
