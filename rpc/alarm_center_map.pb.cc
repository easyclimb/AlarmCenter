// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: alarm_center_map.proto
#include "stdafx.h"

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "alarm_center_map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace alarm_center_map {

namespace {

const ::google::protobuf::Descriptor* pt_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pt_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* csr_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csr_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* machine_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  machine_info_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_alarm_5fcenter_5fmap_2eproto() {
  protobuf_AddDesc_alarm_5fcenter_5fmap_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "alarm_center_map.proto");
  GOOGLE_CHECK(file != NULL);
  pt_info_descriptor_ = file->message_type(0);
  static const int pt_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pt_info, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pt_info, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pt_info, level_),
  };
  pt_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      pt_info_descriptor_,
      pt_info::default_instance_,
      pt_info_offsets_,
      -1,
      -1,
      -1,
      sizeof(pt_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pt_info, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pt_info, _is_default_instance_));
  csr_info_descriptor_ = file->message_type(1);
  static const int csr_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_info, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_info, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_info, user_level_),
  };
  csr_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      csr_info_descriptor_,
      csr_info::default_instance_,
      csr_info_offsets_,
      -1,
      -1,
      -1,
      sizeof(csr_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_info, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_info, _is_default_instance_));
  machine_info_descriptor_ = file->message_type(2);
  static const int machine_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(machine_info, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(machine_info, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(machine_info, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(machine_info, ademco_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(machine_info, zone_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(machine_info, auto_popup_),
  };
  machine_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      machine_info_descriptor_,
      machine_info::default_instance_,
      machine_info_offsets_,
      -1,
      -1,
      -1,
      sizeof(machine_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(machine_info, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(machine_info, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_alarm_5fcenter_5fmap_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      pt_info_descriptor_, &pt_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      csr_info_descriptor_, &csr_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      machine_info_descriptor_, &machine_info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_alarm_5fcenter_5fmap_2eproto() {
  delete pt_info::default_instance_;
  delete pt_info_reflection_;
  delete csr_info::default_instance_;
  delete csr_info_reflection_;
  delete machine_info::default_instance_;
  delete machine_info_reflection_;
}

void protobuf_AddDesc_alarm_5fcenter_5fmap_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026alarm_center_map.proto\022\020alarm_center_m"
    "ap\".\n\007pt_info\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\r\n\005l"
    "evel\030\003 \001(\005\"S\n\010csr_info\022%\n\002pt\030\001 \001(\0132\031.ala"
    "rm_center_map.pt_info\022\014\n\004show\030\002 \001(\010\022\022\n\nu"
    "ser_level\030\003 \001(\005\"\215\001\n\014machine_info\022%\n\002pt\030\001"
    " \001(\0132\031.alarm_center_map.pt_info\022\r\n\005title"
    "\030\002 \001(\t\022\014\n\004info\030\003 \001(\t\022\021\n\tademco_id\030\004 \001(\005\022"
    "\022\n\nzone_value\030\005 \001(\005\022\022\n\nauto_popup\030\006 \001(\0102"
    "\325\002\n\013map_service\022H\n\014get_csr_info\022\032.alarm_"
    "center_map.csr_info\032\032.alarm_center_map.c"
    "sr_info\"\000\022\\\n\032get_alarming_machines_info\022"
    "\032.alarm_center_map.csr_info\032\036.alarm_cent"
    "er_map.machine_info\"\0000\001\022H\n\014set_csr_info\022"
    "\032.alarm_center_map.csr_info\032\032.alarm_cent"
    "er_map.csr_info\"\000\022T\n\020set_machine_info\022\036."
    "alarm_center_map.machine_info\032\036.alarm_ce"
    "nter_map.machine_info\"\000b\006proto3", 671);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "alarm_center_map.proto", &protobuf_RegisterTypes);
  pt_info::default_instance_ = new pt_info();
  csr_info::default_instance_ = new csr_info();
  machine_info::default_instance_ = new machine_info();
  pt_info::default_instance_->InitAsDefaultInstance();
  csr_info::default_instance_->InitAsDefaultInstance();
  machine_info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_alarm_5fcenter_5fmap_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_alarm_5fcenter_5fmap_2eproto {
  StaticDescriptorInitializer_alarm_5fcenter_5fmap_2eproto() {
    protobuf_AddDesc_alarm_5fcenter_5fmap_2eproto();
  }
} static_descriptor_initializer_alarm_5fcenter_5fmap_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pt_info::kXFieldNumber;
const int pt_info::kYFieldNumber;
const int pt_info::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pt_info::pt_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarm_center_map.pt_info)
}

void pt_info::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

pt_info::pt_info(const pt_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:alarm_center_map.pt_info)
}

void pt_info::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  level_ = 0;
}

pt_info::~pt_info() {
  // @@protoc_insertion_point(destructor:alarm_center_map.pt_info)
  SharedDtor();
}

void pt_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pt_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pt_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pt_info_descriptor_;
}

const pt_info& pt_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alarm_5fcenter_5fmap_2eproto();
  return *default_instance_;
}

pt_info* pt_info::default_instance_ = NULL;

pt_info* pt_info::New(::google::protobuf::Arena* arena) const {
  pt_info* n = new pt_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void pt_info::Clear() {
// @@protoc_insertion_point(message_clear_start:alarm_center_map.pt_info)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(pt_info, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<pt_info*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, level_);

#undef ZR_HELPER_
#undef ZR_

}

bool pt_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarm_center_map.pt_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarm_center_map.pt_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarm_center_map.pt_info)
  return false;
#undef DO_
}

void pt_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarm_center_map.pt_info)
  // optional double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional int32 level = 3;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // @@protoc_insertion_point(serialize_end:alarm_center_map.pt_info)
}

::google::protobuf::uint8* pt_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:alarm_center_map.pt_info)
  // optional double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional int32 level = 3;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:alarm_center_map.pt_info)
  return target;
}

int pt_info::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:alarm_center_map.pt_info)
  int total_size = 0;

  // optional double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 level = 3;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pt_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarm_center_map.pt_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const pt_info* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const pt_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarm_center_map.pt_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarm_center_map.pt_info)
    MergeFrom(*source);
  }
}

void pt_info::MergeFrom(const pt_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarm_center_map.pt_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void pt_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarm_center_map.pt_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pt_info::CopyFrom(const pt_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarm_center_map.pt_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pt_info::IsInitialized() const {

  return true;
}

void pt_info::Swap(pt_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void pt_info::InternalSwap(pt_info* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(level_, other->level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata pt_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pt_info_descriptor_;
  metadata.reflection = pt_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// pt_info

// optional double x = 1;
void pt_info::clear_x() {
  x_ = 0;
}
 double pt_info::x() const {
  // @@protoc_insertion_point(field_get:alarm_center_map.pt_info.x)
  return x_;
}
 void pt_info::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_map.pt_info.x)
}

// optional double y = 2;
void pt_info::clear_y() {
  y_ = 0;
}
 double pt_info::y() const {
  // @@protoc_insertion_point(field_get:alarm_center_map.pt_info.y)
  return y_;
}
 void pt_info::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_map.pt_info.y)
}

// optional int32 level = 3;
void pt_info::clear_level() {
  level_ = 0;
}
 ::google::protobuf::int32 pt_info::level() const {
  // @@protoc_insertion_point(field_get:alarm_center_map.pt_info.level)
  return level_;
}
 void pt_info::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_map.pt_info.level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int csr_info::kPtFieldNumber;
const int csr_info::kShowFieldNumber;
const int csr_info::kUserLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

csr_info::csr_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarm_center_map.csr_info)
}

void csr_info::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pt_ = const_cast< ::alarm_center_map::pt_info*>(&::alarm_center_map::pt_info::default_instance());
}

csr_info::csr_info(const csr_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:alarm_center_map.csr_info)
}

void csr_info::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  pt_ = NULL;
  show_ = false;
  user_level_ = 0;
}

csr_info::~csr_info() {
  // @@protoc_insertion_point(destructor:alarm_center_map.csr_info)
  SharedDtor();
}

void csr_info::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void csr_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csr_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csr_info_descriptor_;
}

const csr_info& csr_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alarm_5fcenter_5fmap_2eproto();
  return *default_instance_;
}

csr_info* csr_info::default_instance_ = NULL;

csr_info* csr_info::New(::google::protobuf::Arena* arena) const {
  csr_info* n = new csr_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void csr_info::Clear() {
// @@protoc_insertion_point(message_clear_start:alarm_center_map.csr_info)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(csr_info, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<csr_info*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(show_, user_level_);
  if (GetArenaNoVirtual() == NULL && pt_ != NULL) delete pt_;
  pt_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool csr_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarm_center_map.csr_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .alarm_center_map.pt_info pt = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_show;
        break;
      }

      // optional bool show = 2;
      case 2: {
        if (tag == 16) {
         parse_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_level;
        break;
      }

      // optional int32 user_level = 3;
      case 3: {
        if (tag == 24) {
         parse_user_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_level_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarm_center_map.csr_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarm_center_map.csr_info)
  return false;
#undef DO_
}

void csr_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarm_center_map.csr_info)
  // optional .alarm_center_map.pt_info pt = 1;
  if (this->has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pt_, output);
  }

  // optional bool show = 2;
  if (this->show() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show(), output);
  }

  // optional int32 user_level = 3;
  if (this->user_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_level(), output);
  }

  // @@protoc_insertion_point(serialize_end:alarm_center_map.csr_info)
}

::google::protobuf::uint8* csr_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:alarm_center_map.csr_info)
  // optional .alarm_center_map.pt_info pt = 1;
  if (this->has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->pt_, target);
  }

  // optional bool show = 2;
  if (this->show() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show(), target);
  }

  // optional int32 user_level = 3;
  if (this->user_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_level(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:alarm_center_map.csr_info)
  return target;
}

int csr_info::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:alarm_center_map.csr_info)
  int total_size = 0;

  // optional .alarm_center_map.pt_info pt = 1;
  if (this->has_pt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pt_);
  }

  // optional bool show = 2;
  if (this->show() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 user_level = 3;
  if (this->user_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->user_level());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csr_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarm_center_map.csr_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const csr_info* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const csr_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarm_center_map.csr_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarm_center_map.csr_info)
    MergeFrom(*source);
  }
}

void csr_info::MergeFrom(const csr_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarm_center_map.csr_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_pt()) {
    mutable_pt()->::alarm_center_map::pt_info::MergeFrom(from.pt());
  }
  if (from.show() != 0) {
    set_show(from.show());
  }
  if (from.user_level() != 0) {
    set_user_level(from.user_level());
  }
}

void csr_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarm_center_map.csr_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csr_info::CopyFrom(const csr_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarm_center_map.csr_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csr_info::IsInitialized() const {

  return true;
}

void csr_info::Swap(csr_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void csr_info::InternalSwap(csr_info* other) {
  std::swap(pt_, other->pt_);
  std::swap(show_, other->show_);
  std::swap(user_level_, other->user_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata csr_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csr_info_descriptor_;
  metadata.reflection = csr_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// csr_info

// optional .alarm_center_map.pt_info pt = 1;
bool csr_info::has_pt() const {
  return !_is_default_instance_ && pt_ != NULL;
}
void csr_info::clear_pt() {
  if (GetArenaNoVirtual() == NULL && pt_ != NULL) delete pt_;
  pt_ = NULL;
}
const ::alarm_center_map::pt_info& csr_info::pt() const {
  // @@protoc_insertion_point(field_get:alarm_center_map.csr_info.pt)
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
::alarm_center_map::pt_info* csr_info::mutable_pt() {
  
  if (pt_ == NULL) {
    pt_ = new ::alarm_center_map::pt_info;
  }
  // @@protoc_insertion_point(field_mutable:alarm_center_map.csr_info.pt)
  return pt_;
}
::alarm_center_map::pt_info* csr_info::release_pt() {
  // @@protoc_insertion_point(field_release:alarm_center_map.csr_info.pt)
  
  ::alarm_center_map::pt_info* temp = pt_;
  pt_ = NULL;
  return temp;
}
void csr_info::set_allocated_pt(::alarm_center_map::pt_info* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarm_center_map.csr_info.pt)
}

// optional bool show = 2;
void csr_info::clear_show() {
  show_ = false;
}
 bool csr_info::show() const {
  // @@protoc_insertion_point(field_get:alarm_center_map.csr_info.show)
  return show_;
}
 void csr_info::set_show(bool value) {
  
  show_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_map.csr_info.show)
}

// optional int32 user_level = 3;
void csr_info::clear_user_level() {
  user_level_ = 0;
}
 ::google::protobuf::int32 csr_info::user_level() const {
  // @@protoc_insertion_point(field_get:alarm_center_map.csr_info.user_level)
  return user_level_;
}
 void csr_info::set_user_level(::google::protobuf::int32 value) {
  
  user_level_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_map.csr_info.user_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int machine_info::kPtFieldNumber;
const int machine_info::kTitleFieldNumber;
const int machine_info::kInfoFieldNumber;
const int machine_info::kAdemcoIdFieldNumber;
const int machine_info::kZoneValueFieldNumber;
const int machine_info::kAutoPopupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

machine_info::machine_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarm_center_map.machine_info)
}

void machine_info::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pt_ = const_cast< ::alarm_center_map::pt_info*>(&::alarm_center_map::pt_info::default_instance());
}

machine_info::machine_info(const machine_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:alarm_center_map.machine_info)
}

void machine_info::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pt_ = NULL;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ademco_id_ = 0;
  zone_value_ = 0;
  auto_popup_ = false;
}

machine_info::~machine_info() {
  // @@protoc_insertion_point(destructor:alarm_center_map.machine_info)
  SharedDtor();
}

void machine_info::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete pt_;
  }
}

void machine_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* machine_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return machine_info_descriptor_;
}

const machine_info& machine_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alarm_5fcenter_5fmap_2eproto();
  return *default_instance_;
}

machine_info* machine_info::default_instance_ = NULL;

machine_info* machine_info::New(::google::protobuf::Arena* arena) const {
  machine_info* n = new machine_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void machine_info::Clear() {
// @@protoc_insertion_point(message_clear_start:alarm_center_map.machine_info)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(machine_info, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<machine_info*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ademco_id_, auto_popup_);
  if (GetArenaNoVirtual() == NULL && pt_ != NULL) delete pt_;
  pt_ = NULL;
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool machine_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarm_center_map.machine_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .alarm_center_map.pt_info pt = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarm_center_map.machine_info.title"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional string info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarm_center_map.machine_info.info"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ademco_id;
        break;
      }

      // optional int32 ademco_id = 4;
      case 4: {
        if (tag == 32) {
         parse_ademco_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ademco_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_zone_value;
        break;
      }

      // optional int32 zone_value = 5;
      case 5: {
        if (tag == 40) {
         parse_zone_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zone_value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_auto_popup;
        break;
      }

      // optional bool auto_popup = 6;
      case 6: {
        if (tag == 48) {
         parse_auto_popup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_popup_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarm_center_map.machine_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarm_center_map.machine_info)
  return false;
#undef DO_
}

void machine_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarm_center_map.machine_info)
  // optional .alarm_center_map.pt_info pt = 1;
  if (this->has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pt_, output);
  }

  // optional string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_map.machine_info.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string info = 3;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_map.machine_info.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->info(), output);
  }

  // optional int32 ademco_id = 4;
  if (this->ademco_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ademco_id(), output);
  }

  // optional int32 zone_value = 5;
  if (this->zone_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->zone_value(), output);
  }

  // optional bool auto_popup = 6;
  if (this->auto_popup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->auto_popup(), output);
  }

  // @@protoc_insertion_point(serialize_end:alarm_center_map.machine_info)
}

::google::protobuf::uint8* machine_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:alarm_center_map.machine_info)
  // optional .alarm_center_map.pt_info pt = 1;
  if (this->has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->pt_, target);
  }

  // optional string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_map.machine_info.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string info = 3;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarm_center_map.machine_info.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->info(), target);
  }

  // optional int32 ademco_id = 4;
  if (this->ademco_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ademco_id(), target);
  }

  // optional int32 zone_value = 5;
  if (this->zone_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->zone_value(), target);
  }

  // optional bool auto_popup = 6;
  if (this->auto_popup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->auto_popup(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:alarm_center_map.machine_info)
  return target;
}

int machine_info::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:alarm_center_map.machine_info)
  int total_size = 0;

  // optional .alarm_center_map.pt_info pt = 1;
  if (this->has_pt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pt_);
  }

  // optional string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // optional string info = 3;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info());
  }

  // optional int32 ademco_id = 4;
  if (this->ademco_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ademco_id());
  }

  // optional int32 zone_value = 5;
  if (this->zone_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zone_value());
  }

  // optional bool auto_popup = 6;
  if (this->auto_popup() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void machine_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarm_center_map.machine_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const machine_info* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const machine_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarm_center_map.machine_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarm_center_map.machine_info)
    MergeFrom(*source);
  }
}

void machine_info::MergeFrom(const machine_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarm_center_map.machine_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_pt()) {
    mutable_pt()->::alarm_center_map::pt_info::MergeFrom(from.pt());
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.ademco_id() != 0) {
    set_ademco_id(from.ademco_id());
  }
  if (from.zone_value() != 0) {
    set_zone_value(from.zone_value());
  }
  if (from.auto_popup() != 0) {
    set_auto_popup(from.auto_popup());
  }
}

void machine_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarm_center_map.machine_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void machine_info::CopyFrom(const machine_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarm_center_map.machine_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool machine_info::IsInitialized() const {

  return true;
}

void machine_info::Swap(machine_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void machine_info::InternalSwap(machine_info* other) {
  std::swap(pt_, other->pt_);
  title_.Swap(&other->title_);
  info_.Swap(&other->info_);
  std::swap(ademco_id_, other->ademco_id_);
  std::swap(zone_value_, other->zone_value_);
  std::swap(auto_popup_, other->auto_popup_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata machine_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = machine_info_descriptor_;
  metadata.reflection = machine_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// machine_info

// optional .alarm_center_map.pt_info pt = 1;
bool machine_info::has_pt() const {
  return !_is_default_instance_ && pt_ != NULL;
}
void machine_info::clear_pt() {
  if (GetArenaNoVirtual() == NULL && pt_ != NULL) delete pt_;
  pt_ = NULL;
}
const ::alarm_center_map::pt_info& machine_info::pt() const {
  // @@protoc_insertion_point(field_get:alarm_center_map.machine_info.pt)
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
::alarm_center_map::pt_info* machine_info::mutable_pt() {
  
  if (pt_ == NULL) {
    pt_ = new ::alarm_center_map::pt_info;
  }
  // @@protoc_insertion_point(field_mutable:alarm_center_map.machine_info.pt)
  return pt_;
}
::alarm_center_map::pt_info* machine_info::release_pt() {
  // @@protoc_insertion_point(field_release:alarm_center_map.machine_info.pt)
  
  ::alarm_center_map::pt_info* temp = pt_;
  pt_ = NULL;
  return temp;
}
void machine_info::set_allocated_pt(::alarm_center_map::pt_info* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarm_center_map.machine_info.pt)
}

// optional string title = 2;
void machine_info::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& machine_info::title() const {
  // @@protoc_insertion_point(field_get:alarm_center_map.machine_info.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void machine_info::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarm_center_map.machine_info.title)
}
 void machine_info::set_title(const char* value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarm_center_map.machine_info.title)
}
 void machine_info::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarm_center_map.machine_info.title)
}
 ::std::string* machine_info::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:alarm_center_map.machine_info.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* machine_info::release_title() {
  // @@protoc_insertion_point(field_release:alarm_center_map.machine_info.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void machine_info::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:alarm_center_map.machine_info.title)
}

// optional string info = 3;
void machine_info::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& machine_info::info() const {
  // @@protoc_insertion_point(field_get:alarm_center_map.machine_info.info)
  return info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void machine_info::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarm_center_map.machine_info.info)
}
 void machine_info::set_info(const char* value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarm_center_map.machine_info.info)
}
 void machine_info::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarm_center_map.machine_info.info)
}
 ::std::string* machine_info::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:alarm_center_map.machine_info.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* machine_info::release_info() {
  // @@protoc_insertion_point(field_release:alarm_center_map.machine_info.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void machine_info::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:alarm_center_map.machine_info.info)
}

// optional int32 ademco_id = 4;
void machine_info::clear_ademco_id() {
  ademco_id_ = 0;
}
 ::google::protobuf::int32 machine_info::ademco_id() const {
  // @@protoc_insertion_point(field_get:alarm_center_map.machine_info.ademco_id)
  return ademco_id_;
}
 void machine_info::set_ademco_id(::google::protobuf::int32 value) {
  
  ademco_id_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_map.machine_info.ademco_id)
}

// optional int32 zone_value = 5;
void machine_info::clear_zone_value() {
  zone_value_ = 0;
}
 ::google::protobuf::int32 machine_info::zone_value() const {
  // @@protoc_insertion_point(field_get:alarm_center_map.machine_info.zone_value)
  return zone_value_;
}
 void machine_info::set_zone_value(::google::protobuf::int32 value) {
  
  zone_value_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_map.machine_info.zone_value)
}

// optional bool auto_popup = 6;
void machine_info::clear_auto_popup() {
  auto_popup_ = false;
}
 bool machine_info::auto_popup() const {
  // @@protoc_insertion_point(field_get:alarm_center_map.machine_info.auto_popup)
  return auto_popup_;
}
 void machine_info::set_auto_popup(bool value) {
  
  auto_popup_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_map.machine_info.auto_popup)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace alarm_center_map

// @@protoc_insertion_point(global_scope)
