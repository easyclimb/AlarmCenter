// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: alarm_center_map.proto

#ifndef PROTOBUF_alarm_5fcenter_5fmap_2eproto__INCLUDED
#define PROTOBUF_alarm_5fcenter_5fmap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace alarm_center_map {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_alarm_5fcenter_5fmap_2eproto();
void protobuf_AssignDesc_alarm_5fcenter_5fmap_2eproto();
void protobuf_ShutdownFile_alarm_5fcenter_5fmap_2eproto();

class csr_info;
class machine_info;
class pt_info;

// ===================================================================

class pt_info : public ::google::protobuf::Message {
 public:
  pt_info();
  virtual ~pt_info();

  pt_info(const pt_info& from);

  inline pt_info& operator=(const pt_info& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pt_info& default_instance();

  void Swap(pt_info* other);

  // implements Message ----------------------------------------------

  inline pt_info* New() const { return New(NULL); }

  pt_info* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pt_info& from);
  void MergeFrom(const pt_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(pt_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional int32 level = 3;
  void clear_level();
  static const int kLevelFieldNumber = 3;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:alarm_center_map.pt_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double x_;
  double y_;
  ::google::protobuf::int32 level_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_alarm_5fcenter_5fmap_2eproto();
  friend void protobuf_AssignDesc_alarm_5fcenter_5fmap_2eproto();
  friend void protobuf_ShutdownFile_alarm_5fcenter_5fmap_2eproto();

  void InitAsDefaultInstance();
  static pt_info* default_instance_;
};
// -------------------------------------------------------------------

class csr_info : public ::google::protobuf::Message {
 public:
  csr_info();
  virtual ~csr_info();

  csr_info(const csr_info& from);

  inline csr_info& operator=(const csr_info& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csr_info& default_instance();

  void Swap(csr_info* other);

  // implements Message ----------------------------------------------

  inline csr_info* New() const { return New(NULL); }

  csr_info* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csr_info& from);
  void MergeFrom(const csr_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(csr_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .alarm_center_map.pt_info pt = 1;
  bool has_pt() const;
  void clear_pt();
  static const int kPtFieldNumber = 1;
  const ::alarm_center_map::pt_info& pt() const;
  ::alarm_center_map::pt_info* mutable_pt();
  ::alarm_center_map::pt_info* release_pt();
  void set_allocated_pt(::alarm_center_map::pt_info* pt);

  // optional bool show = 2;
  void clear_show();
  static const int kShowFieldNumber = 2;
  bool show() const;
  void set_show(bool value);

  // @@protoc_insertion_point(class_scope:alarm_center_map.csr_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::alarm_center_map::pt_info* pt_;
  bool show_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_alarm_5fcenter_5fmap_2eproto();
  friend void protobuf_AssignDesc_alarm_5fcenter_5fmap_2eproto();
  friend void protobuf_ShutdownFile_alarm_5fcenter_5fmap_2eproto();

  void InitAsDefaultInstance();
  static csr_info* default_instance_;
};
// -------------------------------------------------------------------

class machine_info : public ::google::protobuf::Message {
 public:
  machine_info();
  virtual ~machine_info();

  machine_info(const machine_info& from);

  inline machine_info& operator=(const machine_info& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const machine_info& default_instance();

  void Swap(machine_info* other);

  // implements Message ----------------------------------------------

  inline machine_info* New() const { return New(NULL); }

  machine_info* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const machine_info& from);
  void MergeFrom(const machine_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(machine_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .alarm_center_map.pt_info pt = 1;
  bool has_pt() const;
  void clear_pt();
  static const int kPtFieldNumber = 1;
  const ::alarm_center_map::pt_info& pt() const;
  ::alarm_center_map::pt_info* mutable_pt();
  ::alarm_center_map::pt_info* release_pt();
  void set_allocated_pt(::alarm_center_map::pt_info* pt);

  // optional string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string info = 3;
  void clear_info();
  static const int kInfoFieldNumber = 3;
  const ::std::string& info() const;
  void set_info(const ::std::string& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  ::std::string* mutable_info();
  ::std::string* release_info();
  void set_allocated_info(::std::string* info);

  // optional int32 ademco_id = 4;
  void clear_ademco_id();
  static const int kAdemcoIdFieldNumber = 4;
  ::google::protobuf::int32 ademco_id() const;
  void set_ademco_id(::google::protobuf::int32 value);

  // optional int32 zone_value = 5;
  void clear_zone_value();
  static const int kZoneValueFieldNumber = 5;
  ::google::protobuf::int32 zone_value() const;
  void set_zone_value(::google::protobuf::int32 value);

  // optional bool auto_popup = 6;
  void clear_auto_popup();
  static const int kAutoPopupFieldNumber = 6;
  bool auto_popup() const;
  void set_auto_popup(bool value);

  // @@protoc_insertion_point(class_scope:alarm_center_map.machine_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::alarm_center_map::pt_info* pt_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr info_;
  ::google::protobuf::int32 ademco_id_;
  ::google::protobuf::int32 zone_value_;
  bool auto_popup_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_alarm_5fcenter_5fmap_2eproto();
  friend void protobuf_AssignDesc_alarm_5fcenter_5fmap_2eproto();
  friend void protobuf_ShutdownFile_alarm_5fcenter_5fmap_2eproto();

  void InitAsDefaultInstance();
  static machine_info* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// pt_info

// optional double x = 1;
inline void pt_info::clear_x() {
  x_ = 0;
}
inline double pt_info::x() const {
  // @@protoc_insertion_point(field_get:alarm_center_map.pt_info.x)
  return x_;
}
inline void pt_info::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_map.pt_info.x)
}

// optional double y = 2;
inline void pt_info::clear_y() {
  y_ = 0;
}
inline double pt_info::y() const {
  // @@protoc_insertion_point(field_get:alarm_center_map.pt_info.y)
  return y_;
}
inline void pt_info::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_map.pt_info.y)
}

// optional int32 level = 3;
inline void pt_info::clear_level() {
  level_ = 0;
}
inline ::google::protobuf::int32 pt_info::level() const {
  // @@protoc_insertion_point(field_get:alarm_center_map.pt_info.level)
  return level_;
}
inline void pt_info::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_map.pt_info.level)
}

// -------------------------------------------------------------------

// csr_info

// optional .alarm_center_map.pt_info pt = 1;
inline bool csr_info::has_pt() const {
  return !_is_default_instance_ && pt_ != NULL;
}
inline void csr_info::clear_pt() {
  if (GetArenaNoVirtual() == NULL && pt_ != NULL) delete pt_;
  pt_ = NULL;
}
inline const ::alarm_center_map::pt_info& csr_info::pt() const {
  // @@protoc_insertion_point(field_get:alarm_center_map.csr_info.pt)
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::alarm_center_map::pt_info* csr_info::mutable_pt() {
  
  if (pt_ == NULL) {
    pt_ = new ::alarm_center_map::pt_info;
  }
  // @@protoc_insertion_point(field_mutable:alarm_center_map.csr_info.pt)
  return pt_;
}
inline ::alarm_center_map::pt_info* csr_info::release_pt() {
  // @@protoc_insertion_point(field_release:alarm_center_map.csr_info.pt)
  
  ::alarm_center_map::pt_info* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void csr_info::set_allocated_pt(::alarm_center_map::pt_info* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarm_center_map.csr_info.pt)
}

// optional bool show = 2;
inline void csr_info::clear_show() {
  show_ = false;
}
inline bool csr_info::show() const {
  // @@protoc_insertion_point(field_get:alarm_center_map.csr_info.show)
  return show_;
}
inline void csr_info::set_show(bool value) {
  
  show_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_map.csr_info.show)
}

// -------------------------------------------------------------------

// machine_info

// optional .alarm_center_map.pt_info pt = 1;
inline bool machine_info::has_pt() const {
  return !_is_default_instance_ && pt_ != NULL;
}
inline void machine_info::clear_pt() {
  if (GetArenaNoVirtual() == NULL && pt_ != NULL) delete pt_;
  pt_ = NULL;
}
inline const ::alarm_center_map::pt_info& machine_info::pt() const {
  // @@protoc_insertion_point(field_get:alarm_center_map.machine_info.pt)
  return pt_ != NULL ? *pt_ : *default_instance_->pt_;
}
inline ::alarm_center_map::pt_info* machine_info::mutable_pt() {
  
  if (pt_ == NULL) {
    pt_ = new ::alarm_center_map::pt_info;
  }
  // @@protoc_insertion_point(field_mutable:alarm_center_map.machine_info.pt)
  return pt_;
}
inline ::alarm_center_map::pt_info* machine_info::release_pt() {
  // @@protoc_insertion_point(field_release:alarm_center_map.machine_info.pt)
  
  ::alarm_center_map::pt_info* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline void machine_info::set_allocated_pt(::alarm_center_map::pt_info* pt) {
  delete pt_;
  pt_ = pt;
  if (pt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarm_center_map.machine_info.pt)
}

// optional string title = 2;
inline void machine_info::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& machine_info::title() const {
  // @@protoc_insertion_point(field_get:alarm_center_map.machine_info.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void machine_info::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarm_center_map.machine_info.title)
}
inline void machine_info::set_title(const char* value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarm_center_map.machine_info.title)
}
inline void machine_info::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarm_center_map.machine_info.title)
}
inline ::std::string* machine_info::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:alarm_center_map.machine_info.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* machine_info::release_title() {
  // @@protoc_insertion_point(field_release:alarm_center_map.machine_info.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void machine_info::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:alarm_center_map.machine_info.title)
}

// optional string info = 3;
inline void machine_info::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& machine_info::info() const {
  // @@protoc_insertion_point(field_get:alarm_center_map.machine_info.info)
  return info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void machine_info::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarm_center_map.machine_info.info)
}
inline void machine_info::set_info(const char* value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarm_center_map.machine_info.info)
}
inline void machine_info::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarm_center_map.machine_info.info)
}
inline ::std::string* machine_info::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:alarm_center_map.machine_info.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* machine_info::release_info() {
  // @@protoc_insertion_point(field_release:alarm_center_map.machine_info.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void machine_info::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:alarm_center_map.machine_info.info)
}

// optional int32 ademco_id = 4;
inline void machine_info::clear_ademco_id() {
  ademco_id_ = 0;
}
inline ::google::protobuf::int32 machine_info::ademco_id() const {
  // @@protoc_insertion_point(field_get:alarm_center_map.machine_info.ademco_id)
  return ademco_id_;
}
inline void machine_info::set_ademco_id(::google::protobuf::int32 value) {
  
  ademco_id_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_map.machine_info.ademco_id)
}

// optional int32 zone_value = 5;
inline void machine_info::clear_zone_value() {
  zone_value_ = 0;
}
inline ::google::protobuf::int32 machine_info::zone_value() const {
  // @@protoc_insertion_point(field_get:alarm_center_map.machine_info.zone_value)
  return zone_value_;
}
inline void machine_info::set_zone_value(::google::protobuf::int32 value) {
  
  zone_value_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_map.machine_info.zone_value)
}

// optional bool auto_popup = 6;
inline void machine_info::clear_auto_popup() {
  auto_popup_ = false;
}
inline bool machine_info::auto_popup() const {
  // @@protoc_insertion_point(field_get:alarm_center_map.machine_info.auto_popup)
  return auto_popup_;
}
inline void machine_info::set_auto_popup(bool value) {
  
  auto_popup_ = value;
  // @@protoc_insertion_point(field_set:alarm_center_map.machine_info.auto_popup)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace alarm_center_map

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_alarm_5fcenter_5fmap_2eproto__INCLUDED
