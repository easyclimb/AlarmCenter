// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: hellostreamingworld.proto
// Original file comments:
// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
#ifndef GRPC_hellostreamingworld_2eproto__INCLUDED
#define GRPC_hellostreamingworld_2eproto__INCLUDED

#include "hellostreamingworld.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace hellostreamingworld {

// The greeting service definition.
class MultiGreeter GRPC_FINAL {
public:
	class StubInterface {
	public:
		virtual ~StubInterface() {}
		// Sends multiple greetings
		std::unique_ptr< ::grpc::ClientReaderInterface< ::hellostreamingworld::HelloReply>> sayHello(::grpc::ClientContext* context, const ::hellostreamingworld::HelloRequest& request) {
			return std::unique_ptr< ::grpc::ClientReaderInterface< ::hellostreamingworld::HelloReply>>(sayHelloRaw(context, request));
		}
		std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::hellostreamingworld::HelloReply>> AsyncsayHello(::grpc::ClientContext* context, const ::hellostreamingworld::HelloRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
			return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::hellostreamingworld::HelloReply>>(AsyncsayHelloRaw(context, request, cq, tag));
		}
	private:
		virtual ::grpc::ClientReaderInterface< ::hellostreamingworld::HelloReply>* sayHelloRaw(::grpc::ClientContext* context, const ::hellostreamingworld::HelloRequest& request) = 0;
		virtual ::grpc::ClientAsyncReaderInterface< ::hellostreamingworld::HelloReply>* AsyncsayHelloRaw(::grpc::ClientContext* context, const ::hellostreamingworld::HelloRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
	};
	class Stub GRPC_FINAL : public StubInterface {
	public:
		Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
		std::unique_ptr< ::grpc::ClientReader< ::hellostreamingworld::HelloReply>> sayHello(::grpc::ClientContext* context, const ::hellostreamingworld::HelloRequest& request) {
			return std::unique_ptr< ::grpc::ClientReader< ::hellostreamingworld::HelloReply>>(sayHelloRaw(context, request));
		}
		std::unique_ptr< ::grpc::ClientAsyncReader< ::hellostreamingworld::HelloReply>> AsyncsayHello(::grpc::ClientContext* context, const ::hellostreamingworld::HelloRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
			return std::unique_ptr< ::grpc::ClientAsyncReader< ::hellostreamingworld::HelloReply>>(AsyncsayHelloRaw(context, request, cq, tag));
		}

	private:
		std::shared_ptr< ::grpc::ChannelInterface> channel_;
		::grpc::ClientReader< ::hellostreamingworld::HelloReply>* sayHelloRaw(::grpc::ClientContext* context, const ::hellostreamingworld::HelloRequest& request) GRPC_OVERRIDE;
		::grpc::ClientAsyncReader< ::hellostreamingworld::HelloReply>* AsyncsayHelloRaw(::grpc::ClientContext* context, const ::hellostreamingworld::HelloRequest& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
		const ::grpc::RpcMethod rpcmethod_sayHello_;
	};
	static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

	class Service : public ::grpc::Service {
	public:
		Service();
		virtual ~Service();
		// Sends multiple greetings
		virtual ::grpc::Status sayHello(::grpc::ServerContext* context, const ::hellostreamingworld::HelloRequest* request, ::grpc::ServerWriter< ::hellostreamingworld::HelloReply>* writer);
	};
	template <class BaseClass>
	class WithAsyncMethod_sayHello : public BaseClass {
	private:
		void BaseClassMustBeDerivedFromService(const Service *service) {}
	public:
		WithAsyncMethod_sayHello() {
			::grpc::Service::MarkMethodAsync(0);
		}
		~WithAsyncMethod_sayHello() GRPC_OVERRIDE {
			BaseClassMustBeDerivedFromService(this);
		}
		// disable synchronous version of this method
		::grpc::Status sayHello(::grpc::ServerContext* context, const ::hellostreamingworld::HelloRequest* request, ::grpc::ServerWriter< ::hellostreamingworld::HelloReply>* writer) GRPC_FINAL GRPC_OVERRIDE {
			abort();
			return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
		}
		void RequestsayHello(::grpc::ServerContext* context, ::hellostreamingworld::HelloRequest* request, ::grpc::ServerAsyncWriter< ::hellostreamingworld::HelloReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
			::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
		}
	};
	typedef WithAsyncMethod_sayHello<Service > AsyncService;
	template <class BaseClass>
	class WithGenericMethod_sayHello : public BaseClass {
	private:
		void BaseClassMustBeDerivedFromService(const Service *service) {}
	public:
		WithGenericMethod_sayHello() {
			::grpc::Service::MarkMethodGeneric(0);
		}
		~WithGenericMethod_sayHello() GRPC_OVERRIDE {
			BaseClassMustBeDerivedFromService(this);
		}
		// disable synchronous version of this method
		::grpc::Status sayHello(::grpc::ServerContext* context, const ::hellostreamingworld::HelloRequest* request, ::grpc::ServerWriter< ::hellostreamingworld::HelloReply>* writer) GRPC_FINAL GRPC_OVERRIDE {
			abort();
			return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
		}
	};
};

}  // namespace hellostreamingworld


#endif  // GRPC_hellostreamingworld_2eproto__INCLUDED
